# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'iOptron.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# @author - Wolfgang Rafelt, 2023


# Imports
from   PyQt5 import QtCore, QtGui, QtWidgets
from   PyQt5.QtCore import QTimer
import sys
import logging
from   time import *
from   iOptronModel import *
from   utilities import *
from   dialoges import *
from   colorscheme import *


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1024, 640)
        logging.debug('program is startet')
        self.colScheme = None
        self.scope = None
        font = QtGui.QFont()
        font.setPointSize(12)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.centralwidget.setFont(font)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBoxGeneralInformation = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxGeneralInformation.setGeometry(QtCore.QRect(20, 20, 980, 115))
        self.groupBoxGeneralInformation.setObjectName("groupBoxGeneralInformation")
        self.labelGeneralInformtionModel = QtWidgets.QLabel(self.groupBoxGeneralInformation)
        self.labelGeneralInformtionModel.setGeometry(QtCore.QRect(20, 35, 300, 19))
        self.labelGeneralInformtionModel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.labelGeneralInformtionModel.setObjectName("labelGeneralInformtionModel")
        self.labelGeneralInformtionStatus = QtWidgets.QLabel(self.groupBoxGeneralInformation)
        self.labelGeneralInformtionStatus.setGeometry(QtCore.QRect(20, 60, 621, 20))
        self.labelGeneralInformtionStatus.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.labelGeneralInformtionStatus.setObjectName("labelGeneralInformtionStatus")
        self.labelGeneralInformationTracking = QtWidgets.QLabel(self.groupBoxGeneralInformation)
        self.labelGeneralInformationTracking.setGeometry(QtCore.QRect(670, 35, 300, 19))
        self.labelGeneralInformationTracking.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.labelGeneralInformationTracking.setObjectName("labelGeneralInformationTracking")
        self.labelGeneralInformationTime = QtWidgets.QLabel(self.groupBoxGeneralInformation)
        self.labelGeneralInformationTime.setGeometry(QtCore.QRect(340, 85, 300, 19))
        self.labelGeneralInformationTime.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.labelGeneralInformationTime.setObjectName("labelGeneralInformationTime")
        self.labelGeneralInformtionGPS = QtWidgets.QLabel(self.groupBoxGeneralInformation)
        self.labelGeneralInformtionGPS.setGeometry(QtCore.QRect(20, 85, 300, 19))
        self.labelGeneralInformtionGPS.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.labelGeneralInformtionGPS.setObjectName("labelGeneralInformtionGPS")
        self.labelGeneralInformtionHemisphere = QtWidgets.QLabel(self.groupBoxGeneralInformation)
        self.labelGeneralInformtionHemisphere.setGeometry(QtCore.QRect(670, 85, 300, 19))
        self.labelGeneralInformtionHemisphere.setObjectName("labelGeneralInformtionHemisphere")
        self.labelGeneralInformtionMountStatus = QtWidgets.QLabel(self.groupBoxGeneralInformation)
        self.labelGeneralInformtionMountStatus.setGeometry(QtCore.QRect(340, 35, 300, 19))
        self.labelGeneralInformtionMountStatus.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.labelGeneralInformtionMountStatus.setObjectName("labelGeneralInformtionMountStatus")
        self.labelGeneralInformationEncoders = QtWidgets.QLabel(self.groupBoxGeneralInformation)
        self.labelGeneralInformationEncoders.setGeometry(QtCore.QRect(670, 60, 300, 19))
        self.labelGeneralInformationEncoders.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.labelGeneralInformationEncoders.setObjectName("labelGeneralInformationEncoders")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setEnabled(True)
        self.tabWidget.setGeometry(QtCore.QRect(20, 150, 981, 450))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tabWidget.setFont(font)
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setObjectName("tabWidget")
        self.tabMountInformation = QtWidgets.QWidget()
        self.tabMountInformation.setObjectName("tabMountInformation")
        self.groupBoxMountInformation = QtWidgets.QGroupBox(self.tabMountInformation)
        self.groupBoxMountInformation.setEnabled(False)
        self.groupBoxMountInformation.setGeometry(QtCore.QRect(20, 25, 941, 360))
        self.groupBoxMountInformation.setObjectName("groupBoxMountInformation")
        self.labelDate = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelDate.setGeometry(QtCore.QRect(50, 40, 130, 27))
        self.labelDate.setAlignment(QtCore.Qt.AlignCenter)
        self.labelDate.setObjectName("labelDate")
        self.labelTime = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelTime.setGeometry(QtCore.QRect(50, 70, 130, 27))
        self.labelTime.setAlignment(QtCore.Qt.AlignCenter)
        self.labelTime.setObjectName("labelTime")
        self.lineEditDate = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditDate.setGeometry(QtCore.QRect(230, 40, 142, 27))
        self.lineEditDate.setMaxLength(12)
        self.lineEditDate.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditDate.setObjectName("lineEditDate")
        self.lineEditTime = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditTime.setGeometry(QtCore.QRect(230, 70, 142, 27))
        self.lineEditTime.setMaxLength(12)
        self.lineEditTime.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditTime.setObjectName("lineEditTime")
        self.lineEditTimeZone = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditTimeZone.setGeometry(QtCore.QRect(230, 100, 142, 27))
        self.lineEditTimeZone.setMaxLength(12)
        self.lineEditTimeZone.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditTimeZone.setObjectName("lineEditTimeZone")
        self.labelTimeZone = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelTimeZone.setGeometry(QtCore.QRect(50, 100, 130, 27))
        self.labelTimeZone.setAlignment(QtCore.Qt.AlignCenter)
        self.labelTimeZone.setObjectName("labelTimeZone")
        self.labelLatitude = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelLatitude.setGeometry(QtCore.QRect(50, 160, 130, 27))
        self.labelLatitude.setAlignment(QtCore.Qt.AlignCenter)
        self.labelLatitude.setObjectName("labelLatitude")
        self.labelLongitude = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelLongitude.setGeometry(QtCore.QRect(50, 130, 130, 27))
        self.labelLongitude.setAlignment(QtCore.Qt.AlignCenter)
        self.labelLongitude.setObjectName("labelLongitude")
        self.labelRA = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelRA.setGeometry(QtCore.QRect(50, 190, 130, 27))
        self.labelRA.setAlignment(QtCore.Qt.AlignCenter)
        self.labelRA.setObjectName("labelRA")
        self.labelDEC = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelDEC.setGeometry(QtCore.QRect(50, 220, 130, 27))
        self.labelDEC.setAlignment(QtCore.Qt.AlignCenter)
        self.labelDEC.setObjectName("labelDEC")
        self.labelALT = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelALT.setGeometry(QtCore.QRect(50, 280, 130, 27))
        self.labelALT.setAlignment(QtCore.Qt.AlignCenter)
        self.labelALT.setObjectName("labelALT")
        self.labelAZI = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelAZI.setGeometry(QtCore.QRect(50, 250, 130, 27))
        self.labelAZI.setAlignment(QtCore.Qt.AlignCenter)
        self.labelAZI.setObjectName("labelAZI")
        self.labelCustomSavedTR = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelCustomSavedTR.setGeometry(QtCore.QRect(40, 310, 150, 27))
        self.labelCustomSavedTR.setAlignment(QtCore.Qt.AlignCenter)
        self.labelCustomSavedTR.setObjectName("labelCustomSavedTR")
        self.labelSummerTime = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelSummerTime.setGeometry(QtCore.QRect(520, 40, 220, 27))
        self.labelSummerTime.setAlignment(QtCore.Qt.AlignCenter)
        self.labelSummerTime.setObjectName("labelSummerTime")
        self.labelPier = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelPier.setGeometry(QtCore.QRect(520, 70, 220, 27))
        self.labelPier.setAlignment(QtCore.Qt.AlignCenter)
        self.labelPier.setObjectName("labelPier")
        self.labelPointingState = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelPointingState.setGeometry(QtCore.QRect(520, 100, 220, 27))
        self.labelPointingState.setAlignment(QtCore.Qt.AlignCenter)
        self.labelPointingState.setObjectName("labelPointingState")
        self.labelAltitudeLimitInfo = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelAltitudeLimitInfo.setGeometry(QtCore.QRect(520, 130, 220, 27))
        self.labelAltitudeLimitInfo.setAlignment(QtCore.Qt.AlignCenter)
        self.labelAltitudeLimitInfo.setObjectName("labelAltitudeLimitInfo")
        self.labelMeridianTreatment = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelMeridianTreatment.setGeometry(QtCore.QRect(520, 160, 220, 27))
        self.labelMeridianTreatment.setAlignment(QtCore.Qt.AlignCenter)
        self.labelMeridianTreatment.setObjectName("labelMeridianTreatment")
        self.labelFirmwareMainboard = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelFirmwareMainboard.setGeometry(QtCore.QRect(520, 190, 220, 27))
        self.labelFirmwareMainboard.setAlignment(QtCore.Qt.AlignCenter)
        self.labelFirmwareMainboard.setObjectName("labelFirmwareMainboard")
        self.labelFirmwareHandcontroller = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelFirmwareHandcontroller.setGeometry(QtCore.QRect(520, 220, 220, 27))
        self.labelFirmwareHandcontroller.setAlignment(QtCore.Qt.AlignCenter)
        self.labelFirmwareHandcontroller.setObjectName("labelFirmwareHandcontroller")
        self.lineEditSummerTime = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditSummerTime.setGeometry(QtCore.QRect(750, 40, 142, 27))
        self.lineEditSummerTime.setMaxLength(12)
        self.lineEditSummerTime.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditSummerTime.setObjectName("lineEditSummerTime")
        self.lineEditSavedTR = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditSavedTR.setGeometry(QtCore.QRect(230, 310, 142, 27))
        self.lineEditSavedTR.setMaxLength(12)
        self.lineEditSavedTR.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditSavedTR.setObjectName("lineEditSavedTR")
        self.labelFirmwareMotorRA = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelFirmwareMotorRA.setGeometry(QtCore.QRect(520, 250, 220, 27))
        self.labelFirmwareMotorRA.setAlignment(QtCore.Qt.AlignCenter)
        self.labelFirmwareMotorRA.setObjectName("labelFirmwareMotorRA")
        self.lineEditLatitude = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditLatitude.setGeometry(QtCore.QRect(230, 160, 142, 27))
        self.lineEditLatitude.setMaxLength(12)
        self.lineEditLatitude.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditLatitude.setObjectName("lineEditLatitude")
        self.lineEditLongitude = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditLongitude.setGeometry(QtCore.QRect(230, 130, 142, 27))
        self.lineEditLongitude.setMaxLength(12)
        self.lineEditLongitude.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditLongitude.setObjectName("lineEditLongitude")
        self.lineEditRA = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditRA.setGeometry(QtCore.QRect(230, 190, 142, 27))
        self.lineEditRA.setMaxLength(12)
        self.lineEditRA.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditRA.setObjectName("lineEditRA")
        self.lineEditDEC = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditDEC.setGeometry(QtCore.QRect(230, 220, 142, 27))
        self.lineEditDEC.setMaxLength(12)
        self.lineEditDEC.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditDEC.setObjectName("lineEditDEC")
        self.lineEditALT = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditALT.setGeometry(QtCore.QRect(230, 280, 142, 27))
        self.lineEditALT.setMaxLength(12)
        self.lineEditALT.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditALT.setObjectName("lineEditALT")
        self.lineEditAZI = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditAZI.setGeometry(QtCore.QRect(230, 250, 142, 27))
        self.lineEditAZI.setMaxLength(12)
        self.lineEditAZI.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditAZI.setObjectName("lineEditAZI")
        self.lineEditPointingState = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditPointingState.setGeometry(QtCore.QRect(750, 100, 142, 27))
        self.lineEditPointingState.setMaxLength(12)
        self.lineEditPointingState.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditPointingState.setObjectName("lineEditPointingState")
        self.lineEditFirmwareHandcontroller = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditFirmwareHandcontroller.setGeometry(QtCore.QRect(750, 220, 142, 27))
        self.lineEditFirmwareHandcontroller.setMaxLength(12)
        self.lineEditFirmwareHandcontroller.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditFirmwareHandcontroller.setObjectName("lineEditFirmwareHandcontroller")
        self.lineEditAltitudeLimitInfo = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditAltitudeLimitInfo.setGeometry(QtCore.QRect(750, 130, 142, 27))
        self.lineEditAltitudeLimitInfo.setMaxLength(12)
        self.lineEditAltitudeLimitInfo.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditAltitudeLimitInfo.setObjectName("lineEditAltitudeLimitInfo")
        self.lineEditTreatmentStopFlip = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditTreatmentStopFlip.setGeometry(QtCore.QRect(750, 160, 65, 27))
        self.lineEditTreatmentStopFlip.setMaxLength(12)
        self.lineEditTreatmentStopFlip.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditTreatmentStopFlip.setObjectName("lineEditTreatmentStopFlip")
        self.lineEditFirmwareMotorRA = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditFirmwareMotorRA.setGeometry(QtCore.QRect(750, 250, 142, 27))
        self.lineEditFirmwareMotorRA.setMaxLength(12)
        self.lineEditFirmwareMotorRA.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditFirmwareMotorRA.setObjectName("lineEditFirmwareMotorRA")
        self.lineEditPier = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditPier.setGeometry(QtCore.QRect(750, 70, 142, 27))
        self.lineEditPier.setMaxLength(12)
        self.lineEditPier.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditPier.setObjectName("lineEditPier")
        self.lineEditFirmwareMainboard = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditFirmwareMainboard.setGeometry(QtCore.QRect(750, 190, 142, 27))
        self.lineEditFirmwareMainboard.setMaxLength(12)
        self.lineEditFirmwareMainboard.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditFirmwareMainboard.setObjectName("lineEditFirmwareMainboard")
        self.lineEditTreatmentValue = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditTreatmentValue.setGeometry(QtCore.QRect(827, 160, 65, 27))
        self.lineEditTreatmentValue.setMaxLength(12)
        self.lineEditTreatmentValue.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditTreatmentValue.setObjectName("lineEditTreatmentValue")
        self.labelFirmwareMotorDEC = QtWidgets.QLabel(self.groupBoxMountInformation)
        self.labelFirmwareMotorDEC.setGeometry(QtCore.QRect(520, 280, 220, 27))
        self.labelFirmwareMotorDEC.setAlignment(QtCore.Qt.AlignCenter)
        self.labelFirmwareMotorDEC.setObjectName("labelFirmwareMotorDEC")
        self.lineEditFirmwareMotorDEC = QtWidgets.QLineEdit(self.groupBoxMountInformation)
        self.lineEditFirmwareMotorDEC.setGeometry(QtCore.QRect(750, 280, 142, 27))
        self.lineEditFirmwareMotorDEC.setMaxLength(12)
        self.lineEditFirmwareMotorDEC.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditFirmwareMotorDEC.setObjectName("lineEditFirmwareMotorDEC")
        self.tabWidget.addTab(self.tabMountInformation, "")
        self.tabMove = QtWidgets.QWidget()
        self.tabMove.setObjectName("tabMove")
        self.groupBoxMountMoveDirection = QtWidgets.QGroupBox(self.tabMove)
        self.groupBoxMountMoveDirection.setEnabled(False)
        self.groupBoxMountMoveDirection.setGeometry(QtCore.QRect(310, 60, 260, 280))
        self.groupBoxMountMoveDirection.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBoxMountMoveDirection.setObjectName("groupBoxMountMoveDirection")
        self.pushButtonStop = QtWidgets.QPushButton(self.groupBoxMountMoveDirection)
        self.pushButtonStop.setGeometry(QtCore.QRect(90, 110, 80, 80))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.pushButtonStop.setFont(font)
        self.pushButtonStop.setObjectName("pushButtonStop")
        self.pushButtonWest = QtWidgets.QPushButton(self.groupBoxMountMoveDirection)
        self.pushButtonWest.setGeometry(QtCore.QRect(20, 120, 60, 60))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.pushButtonWest.setFont(font)
        self.pushButtonWest.setObjectName("pushButtonWest")
        self.pushButtonEast = QtWidgets.QPushButton(self.groupBoxMountMoveDirection)
        self.pushButtonEast.setGeometry(QtCore.QRect(180, 120, 60, 60))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.pushButtonEast.setFont(font)
        self.pushButtonEast.setObjectName("pushButtonEast")
        self.pushButtonNorth = QtWidgets.QPushButton(self.groupBoxMountMoveDirection)
        self.pushButtonNorth.setGeometry(QtCore.QRect(100, 40, 60, 60))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.pushButtonNorth.setFont(font)
        self.pushButtonNorth.setObjectName("pushButtonNorth")
        self.pushButtonSouth = QtWidgets.QPushButton(self.groupBoxMountMoveDirection)
        self.pushButtonSouth.setGeometry(QtCore.QRect(100, 200, 60, 60))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.pushButtonSouth.setFont(font)
        self.pushButtonSouth.setObjectName("pushButtonSouth")
        self.pushButtonNorthEast = QtWidgets.QPushButton(self.groupBoxMountMoveDirection)
        self.pushButtonNorthEast.setGeometry(QtCore.QRect(180, 40, 60, 60))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.pushButtonNorthEast.setFont(font)
        self.pushButtonNorthEast.setObjectName("pushButtonNorthEast")
        self.pushButtonNorthWest = QtWidgets.QPushButton(self.groupBoxMountMoveDirection)
        self.pushButtonNorthWest.setGeometry(QtCore.QRect(20, 40, 60, 60))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.pushButtonNorthWest.setFont(font)
        self.pushButtonNorthWest.setObjectName("pushButtonNorthWest")
        self.pushButtonSouthEast = QtWidgets.QPushButton(self.groupBoxMountMoveDirection)
        self.pushButtonSouthEast.setGeometry(QtCore.QRect(180, 200, 60, 60))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.pushButtonSouthEast.setFont(font)
        self.pushButtonSouthEast.setObjectName("pushButtonSouthEast")
        self.pushButtonSouthWest = QtWidgets.QPushButton(self.groupBoxMountMoveDirection)
        self.pushButtonSouthWest.setGeometry(QtCore.QRect(20, 200, 60, 60))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.pushButtonSouthWest.setFont(font)
        self.pushButtonSouthWest.setObjectName("pushButtonSouthWest")
        self.groupBoxSetSpeed = QtWidgets.QGroupBox(self.tabMove)
        self.groupBoxSetSpeed.setEnabled(False)
        self.groupBoxSetSpeed.setGeometry(QtCore.QRect(50, 40, 105, 320))
        self.groupBoxSetSpeed.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBoxSetSpeed.setObjectName("groupBoxSetSpeed")
        self.radioButton1x = QtWidgets.QRadioButton(self.groupBoxSetSpeed)
        self.radioButton1x.setGeometry(QtCore.QRect(20, 34, 65, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton1x.setFont(font)
        self.radioButton1x.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.radioButton1x.setObjectName("radioButton1x")
        self.radioButton2x = QtWidgets.QRadioButton(self.groupBoxSetSpeed)
        self.radioButton2x.setGeometry(QtCore.QRect(20, 65, 65, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton2x.setFont(font)
        self.radioButton2x.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.radioButton2x.setObjectName("radioButton2x")
        self.radioButton8x = QtWidgets.QRadioButton(self.groupBoxSetSpeed)
        self.radioButton8x.setGeometry(QtCore.QRect(20, 96, 65, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton8x.setFont(font)
        self.radioButton8x.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.radioButton8x.setObjectName("radioButton8x")
        self.radioButton16x = QtWidgets.QRadioButton(self.groupBoxSetSpeed)
        self.radioButton16x.setGeometry(QtCore.QRect(20, 127, 65, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton16x.setFont(font)
        self.radioButton16x.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.radioButton16x.setObjectName("radioButton16x")
        self.radioButton64x = QtWidgets.QRadioButton(self.groupBoxSetSpeed)
        self.radioButton64x.setGeometry(QtCore.QRect(20, 158, 65, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton64x.setFont(font)
        self.radioButton64x.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.radioButton64x.setCheckable(True)
        self.radioButton64x.setChecked(False)
        self.radioButton64x.setObjectName("radioButton64x")
        self.radioButton128x = QtWidgets.QRadioButton(self.groupBoxSetSpeed)
        self.radioButton128x.setGeometry(QtCore.QRect(20, 189, 65, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton128x.setFont(font)
        self.radioButton128x.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.radioButton128x.setObjectName("radioButton128x")
        self.radioButton256x = QtWidgets.QRadioButton(self.groupBoxSetSpeed)
        self.radioButton256x.setGeometry(QtCore.QRect(20, 220, 65, 25))
        self.radioButton256x.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.radioButton256x.setObjectName("radioButton256x")
        self.radioButton512x = QtWidgets.QRadioButton(self.groupBoxSetSpeed)
        self.radioButton512x.setGeometry(QtCore.QRect(20, 251, 65, 25))
        self.radioButton512x.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.radioButton512x.setObjectName("radioButton512x")
        self.radioButtonMax = QtWidgets.QRadioButton(self.groupBoxSetSpeed)
        self.radioButtonMax.setGeometry(QtCore.QRect(20, 282, 65, 25))
        self.radioButtonMax.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.radioButtonMax.setObjectName("radioButtonMax")
        self.groupBoxSetSpezial = QtWidgets.QGroupBox(self.tabMove)
        self.groupBoxSetSpezial.setEnabled(False)
        self.groupBoxSetSpezial.setGeometry(QtCore.QRect(680, 40, 250, 320))
        self.groupBoxSetSpezial.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBoxSetSpezial.setObjectName("groupBoxSetSpezial")
        self.pushButtonTracking = QtWidgets.QPushButton(self.groupBoxSetSpezial)
        self.pushButtonTracking.setGeometry(QtCore.QRect(40, 50, 170, 27))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonTracking.setFont(font)
        self.pushButtonTracking.setObjectName("pushButtonTracking")
        self.pushButtonZeroPosition = QtWidgets.QPushButton(self.groupBoxSetSpezial)
        self.pushButtonZeroPosition.setGeometry(QtCore.QRect(40, 100, 170, 27))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonZeroPosition.setFont(font)
        self.pushButtonZeroPosition.setObjectName("pushButtonZeroPosition")
        self.pushButtonParkPosition = QtWidgets.QPushButton(self.groupBoxSetSpezial)
        self.pushButtonParkPosition.setGeometry(QtCore.QRect(40, 150, 170, 27))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonParkPosition.setFont(font)
        self.pushButtonParkPosition.setObjectName("pushButtonParkPosition")
        self.pushButtonUnpark = QtWidgets.QPushButton(self.groupBoxSetSpezial)
        self.pushButtonUnpark.setGeometry(QtCore.QRect(40, 200, 170, 27))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonUnpark.setFont(font)
        self.pushButtonUnpark.setObjectName("pushButtonUnpark")
        self.pushButtonSynchronizeMount = QtWidgets.QPushButton(self.groupBoxSetSpezial)
        self.pushButtonSynchronizeMount.setGeometry(QtCore.QRect(40, 250, 170, 27))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonSynchronizeMount.setFont(font)
        self.pushButtonSynchronizeMount.setObjectName("pushButtonSynchronizeMount")
        self.tabWidget.addTab(self.tabMove, "")
        self.tabGeneralSettings = QtWidgets.QWidget()
        self.tabGeneralSettings.setObjectName("tabGeneralSettings")
        self.groupBoxDateAndTime = QtWidgets.QGroupBox(self.tabGeneralSettings)
        self.groupBoxDateAndTime.setEnabled(False)
        self.groupBoxDateAndTime.setGeometry(QtCore.QRect(30, 20, 410, 199))
        self.groupBoxDateAndTime.setObjectName("groupBoxDateAndTime")
        self.lineEditSetTimeZone = QtWidgets.QLineEdit(self.groupBoxDateAndTime)
        self.lineEditSetTimeZone.setGeometry(QtCore.QRect(130, 100, 110, 25))
        self.lineEditSetTimeZone.setMaxLength(12)
        self.lineEditSetTimeZone.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditSetTimeZone.setObjectName("lineEditSetTimeZone")
        self.lineEditSetLongitude = QtWidgets.QLineEdit(self.groupBoxDateAndTime)
        self.lineEditSetLongitude.setGeometry(QtCore.QRect(130, 160, 110, 25))
        self.lineEditSetLongitude.setMaxLength(12)
        self.lineEditSetLongitude.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditSetLongitude.setObjectName("lineEditSetLongitude")
        self.labelSetTimeZone = QtWidgets.QLabel(self.groupBoxDateAndTime)
        self.labelSetTimeZone.setGeometry(QtCore.QRect(10, 100, 100, 25))
        self.labelSetTimeZone.setAlignment(QtCore.Qt.AlignCenter)
        self.labelSetTimeZone.setObjectName("labelSetTimeZone")
        self.labelSetLatitude = QtWidgets.QLabel(self.groupBoxDateAndTime)
        self.labelSetLatitude.setGeometry(QtCore.QRect(10, 130, 100, 25))
        self.labelSetLatitude.setAlignment(QtCore.Qt.AlignCenter)
        self.labelSetLatitude.setObjectName("labelSetLatitude")
        self.lineEditSetLatitude = QtWidgets.QLineEdit(self.groupBoxDateAndTime)
        self.lineEditSetLatitude.setGeometry(QtCore.QRect(130, 130, 110, 25))
        self.lineEditSetLatitude.setMaxLength(12)
        self.lineEditSetLatitude.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditSetLatitude.setObjectName("lineEditSetLatitude")
        self.labelSetDate = QtWidgets.QLabel(self.groupBoxDateAndTime)
        self.labelSetDate.setGeometry(QtCore.QRect(10, 40, 100, 25))
        self.labelSetDate.setAlignment(QtCore.Qt.AlignCenter)
        self.labelSetDate.setObjectName("labelSetDate")
        self.lineEditSetDate = QtWidgets.QLineEdit(self.groupBoxDateAndTime)
        self.lineEditSetDate.setGeometry(QtCore.QRect(130, 40, 110, 25))
        self.lineEditSetDate.setMaxLength(12)
        self.lineEditSetDate.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditSetDate.setObjectName("lineEditSetDate")
        self.lineEditSetTime = QtWidgets.QLineEdit(self.groupBoxDateAndTime)
        self.lineEditSetTime.setGeometry(QtCore.QRect(130, 70, 110, 25))
        self.lineEditSetTime.setMaxLength(12)
        self.lineEditSetTime.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditSetTime.setObjectName("lineEditSetTime")
        self.labelSetTime = QtWidgets.QLabel(self.groupBoxDateAndTime)
        self.labelSetTime.setGeometry(QtCore.QRect(10, 70, 100, 25))
        self.labelSetTime.setAlignment(QtCore.Qt.AlignCenter)
        self.labelSetTime.setObjectName("labelSetTime")
        self.labelSetLongitude = QtWidgets.QLabel(self.groupBoxDateAndTime)
        self.labelSetLongitude.setGeometry(QtCore.QRect(10, 160, 100, 25))
        self.labelSetLongitude.setAlignment(QtCore.Qt.AlignCenter)
        self.labelSetLongitude.setObjectName("labelSetLongitude")
        self.pushButtonWriteDateTime = QtWidgets.QPushButton(self.groupBoxDateAndTime)
        self.pushButtonWriteDateTime.setGeometry(QtCore.QRect(270, 55, 110, 25))
        self.pushButtonWriteDateTime.setObjectName("pushButtonWriteDateTime")
        self.pushButtonWriteTimeZone = QtWidgets.QPushButton(self.groupBoxDateAndTime)
        self.pushButtonWriteTimeZone.setGeometry(QtCore.QRect(270, 100, 110, 25))
        self.pushButtonWriteTimeZone.setObjectName("pushButtonWriteTimeZone")
        self.pushButtonWriteLatitude = QtWidgets.QPushButton(self.groupBoxDateAndTime)
        self.pushButtonWriteLatitude.setGeometry(QtCore.QRect(270, 130, 110, 25))
        self.pushButtonWriteLatitude.setObjectName("pushButtonWriteLatitude")
        self.pushButtonWriteLongitude = QtWidgets.QPushButton(self.groupBoxDateAndTime)
        self.pushButtonWriteLongitude.setGeometry(QtCore.QRect(270, 160, 110, 25))
        self.pushButtonWriteLongitude.setObjectName("pushButtonWriteLongitude")
        self.groupBoxKoordinates = QtWidgets.QGroupBox(self.tabGeneralSettings)
        self.groupBoxKoordinates.setEnabled(False)
        self.groupBoxKoordinates.setGeometry(QtCore.QRect(540, 20, 410, 200))
        self.groupBoxKoordinates.setObjectName("groupBoxKoordinates")
        self.labelSetRA = QtWidgets.QLabel(self.groupBoxKoordinates)
        self.labelSetRA.setGeometry(QtCore.QRect(10, 40, 100, 25))
        self.labelSetRA.setAlignment(QtCore.Qt.AlignCenter)
        self.labelSetRA.setObjectName("labelSetRA")
        self.lineEditSetDEC = QtWidgets.QLineEdit(self.groupBoxKoordinates)
        self.lineEditSetDEC.setGeometry(QtCore.QRect(130, 80, 110, 25))
        self.lineEditSetDEC.setMaxLength(12)
        self.lineEditSetDEC.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditSetDEC.setObjectName("lineEditSetDEC")
        self.lineEditSetAZI = QtWidgets.QLineEdit(self.groupBoxKoordinates)
        self.lineEditSetAZI.setGeometry(QtCore.QRect(130, 120, 110, 25))
        self.lineEditSetAZI.setMaxLength(12)
        self.lineEditSetAZI.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditSetAZI.setObjectName("lineEditSetAZI")
        self.labelSetALT = QtWidgets.QLabel(self.groupBoxKoordinates)
        self.labelSetALT.setGeometry(QtCore.QRect(10, 160, 100, 25))
        self.labelSetALT.setAlignment(QtCore.Qt.AlignCenter)
        self.labelSetALT.setObjectName("labelSetALT")
        self.lineEditSetALT = QtWidgets.QLineEdit(self.groupBoxKoordinates)
        self.lineEditSetALT.setGeometry(QtCore.QRect(130, 160, 110, 25))
        self.lineEditSetALT.setMaxLength(12)
        self.lineEditSetALT.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditSetALT.setObjectName("lineEditSetALT")
        self.lineEditSetRA = QtWidgets.QLineEdit(self.groupBoxKoordinates)
        self.lineEditSetRA.setGeometry(QtCore.QRect(130, 40, 110, 25))
        self.lineEditSetRA.setMaxLength(12)
        self.lineEditSetRA.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditSetRA.setObjectName("lineEditSetRA")
        self.labelSetDEC = QtWidgets.QLabel(self.groupBoxKoordinates)
        self.labelSetDEC.setGeometry(QtCore.QRect(10, 80, 100, 25))
        self.labelSetDEC.setAlignment(QtCore.Qt.AlignCenter)
        self.labelSetDEC.setObjectName("labelSetDEC")
        self.labelSetAZI = QtWidgets.QLabel(self.groupBoxKoordinates)
        self.labelSetAZI.setGeometry(QtCore.QRect(10, 120, 100, 25))
        self.labelSetAZI.setAlignment(QtCore.Qt.AlignCenter)
        self.labelSetAZI.setObjectName("labelSetAZI")
        self.pushButtonWriteRaDec = QtWidgets.QPushButton(self.groupBoxKoordinates)
        self.pushButtonWriteRaDec.setGeometry(QtCore.QRect(270, 60, 111, 25))
        self.pushButtonWriteRaDec.setObjectName("pushButtonWriteRaDec")
        self.pushButtonWriteAziAlt = QtWidgets.QPushButton(self.groupBoxKoordinates)
        self.pushButtonWriteAziAlt.setGeometry(QtCore.QRect(270, 140, 110, 25))
        self.pushButtonWriteAziAlt.setObjectName("pushButtonWriteAziAlt")
        self.groupBoxDateTimePosition = QtWidgets.QGroupBox(self.tabGeneralSettings)
        self.groupBoxDateTimePosition.setGeometry(QtCore.QRect(285, 250, 420, 139))
        self.groupBoxDateTimePosition.setObjectName("groupBoxDateTimePosition")
        self.pushButtonReadDateAndTimeFromPC = QtWidgets.QPushButton(self.groupBoxDateTimePosition)
        self.pushButtonReadDateAndTimeFromPC.setGeometry(QtCore.QRect(40, 34, 340, 27))
        self.pushButtonReadDateAndTimeFromPC.setObjectName("pushButtonReadDateAndTimeFromPC")
        self.pushButtonSetDateAndTimeFromPC = QtWidgets.QPushButton(self.groupBoxDateTimePosition)
        self.pushButtonSetDateAndTimeFromPC.setEnabled(False)
        self.pushButtonSetDateAndTimeFromPC.setGeometry(QtCore.QRect(40, 100, 340, 27))
        self.pushButtonSetDateAndTimeFromPC.setObjectName("pushButtonSetDateAndTimeFromPC")
        self.lineEditDatePC = QtWidgets.QLineEdit(self.groupBoxDateTimePosition)
        self.lineEditDatePC.setGeometry(QtCore.QRect(40, 70, 130, 25))
        self.lineEditDatePC.setMaxLength(12)
        self.lineEditDatePC.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditDatePC.setObjectName("lineEditDatePC")
        self.lineEditTimePC = QtWidgets.QLineEdit(self.groupBoxDateTimePosition)
        self.lineEditTimePC.setGeometry(QtCore.QRect(250, 70, 130, 25))
        self.lineEditTimePC.setMaxLength(12)
        self.lineEditTimePC.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditTimePC.setObjectName("lineEditTimePC")
        self.labelGPSActiv = QtWidgets.QLabel(self.tabGeneralSettings)
        self.labelGPSActiv.setEnabled(True)
        self.labelGPSActiv.setGeometry(QtCore.QRect(220, 20, 221, 20))
        font = QtGui.QFont()
        font.setFamily("Liberation Sans")
        font.setPointSize(12)
        self.labelGPSActiv.setFont(font)
        self.labelGPSActiv.setAlignment(QtCore.Qt.AlignCenter)
        self.labelGPSActiv.setObjectName("labelGPSActiv")
        self.tabWidget.addTab(self.tabGeneralSettings, "")
        self.tabSpezialSettings = QtWidgets.QWidget()
        self.tabSpezialSettings.setObjectName("tabSpezialSettings")
        self.groupBoxTracking = QtWidgets.QGroupBox(self.tabSpezialSettings)
        self.groupBoxTracking.setEnabled(False)
        self.groupBoxTracking.setGeometry(QtCore.QRect(50, 30, 320, 331))
        self.groupBoxTracking.setObjectName("groupBoxTracking")
        self.labelssTrackingRate = QtWidgets.QLabel(self.groupBoxTracking)
        self.labelssTrackingRate.setGeometry(QtCore.QRect(10, 50, 100, 27))
        self.labelssTrackingRate.setAlignment(QtCore.Qt.AlignCenter)
        self.labelssTrackingRate.setObjectName("labelssTrackingRate")
        self.lineEditTrackingRateValue = QtWidgets.QLineEdit(self.groupBoxTracking)
        self.lineEditTrackingRateValue.setGeometry(QtCore.QRect(140, 50, 142, 27))
        self.lineEditTrackingRateValue.setMaxLength(12)
        self.lineEditTrackingRateValue.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditTrackingRateValue.setObjectName("lineEditTrackingRateValue")
        self.radioButtonTrackingSideral = QtWidgets.QRadioButton(self.groupBoxTracking)
        self.radioButtonTrackingSideral.setGeometry(QtCore.QRect(140, 170, 112, 23))
        self.radioButtonTrackingSideral.setObjectName("radioButtonTrackingSideral")
        self.radioButtonTrackingLunar = QtWidgets.QRadioButton(self.groupBoxTracking)
        self.radioButtonTrackingLunar.setGeometry(QtCore.QRect(140, 200, 112, 23))
        self.radioButtonTrackingLunar.setObjectName("radioButtonTrackingLunar")
        self.radioButtonTrackingSolar = QtWidgets.QRadioButton(self.groupBoxTracking)
        self.radioButtonTrackingSolar.setGeometry(QtCore.QRect(140, 230, 112, 23))
        self.radioButtonTrackingSolar.setObjectName("radioButtonTrackingSolar")
        self.radioButtonTrackingKing = QtWidgets.QRadioButton(self.groupBoxTracking)
        self.radioButtonTrackingKing.setGeometry(QtCore.QRect(140, 260, 112, 23))
        self.radioButtonTrackingKing.setObjectName("radioButtonTrackingKing")
        self.radioButtonTrackingCustom = QtWidgets.QRadioButton(self.groupBoxTracking)
        self.radioButtonTrackingCustom.setGeometry(QtCore.QRect(140, 290, 112, 23))
        self.radioButtonTrackingCustom.setObjectName("radioButtonTrackingCustom")
        self.pushButtonWriteTrakingRateValue = QtWidgets.QPushButton(self.groupBoxTracking)
        self.pushButtonWriteTrakingRateValue.setGeometry(QtCore.QRect(140, 90, 142, 27))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonWriteTrakingRateValue.setFont(font)
        self.pushButtonWriteTrakingRateValue.setObjectName("pushButtonWriteTrakingRateValue")
        self.line = QtWidgets.QFrame(self.groupBoxTracking)
        self.line.setGeometry(QtCore.QRect(20, 150, 280, 3))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.groupBoxOthers = QtWidgets.QGroupBox(self.tabSpezialSettings)
        self.groupBoxOthers.setEnabled(False)
        self.groupBoxOthers.setGeometry(QtCore.QRect(450, 90, 480, 210))
        self.groupBoxOthers.setObjectName("groupBoxOthers")
        self.labelOthersSummerTime = QtWidgets.QLabel(self.groupBoxOthers)
        self.labelOthersSummerTime.setGeometry(QtCore.QRect(20, 40, 180, 27))
        self.labelOthersSummerTime.setAlignment(QtCore.Qt.AlignCenter)
        self.labelOthersSummerTime.setObjectName("labelOthersSummerTime")
        self.labelOthersAltitudeLimit = QtWidgets.QLabel(self.groupBoxOthers)
        self.labelOthersAltitudeLimit.setGeometry(QtCore.QRect(20, 80, 180, 27))
        self.labelOthersAltitudeLimit.setAlignment(QtCore.Qt.AlignCenter)
        self.labelOthersAltitudeLimit.setObjectName("labelOthersAltitudeLimit")
        self.lineEditOthersAltitudeLimit = QtWidgets.QLineEdit(self.groupBoxOthers)
        self.lineEditOthersAltitudeLimit.setGeometry(QtCore.QRect(210, 80, 100, 27))
        self.lineEditOthersAltitudeLimit.setMaxLength(12)
        self.lineEditOthersAltitudeLimit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditOthersAltitudeLimit.setObjectName("lineEditOthersAltitudeLimit")
        self.labelOthersMeridianTreatmentStopFlip = QtWidgets.QLabel(self.groupBoxOthers)
        self.labelOthersMeridianTreatmentStopFlip.setGeometry(QtCore.QRect(20, 120, 180, 27))
        self.labelOthersMeridianTreatmentStopFlip.setAlignment(QtCore.Qt.AlignCenter)
        self.labelOthersMeridianTreatmentStopFlip.setObjectName("labelOthersMeridianTreatmentStopFlip")
        self.labelOthersMeridianTreatmentValue = QtWidgets.QLabel(self.groupBoxOthers)
        self.labelOthersMeridianTreatmentValue.setGeometry(QtCore.QRect(20, 160, 180, 27))
        self.labelOthersMeridianTreatmentValue.setAlignment(QtCore.Qt.AlignCenter)
        self.labelOthersMeridianTreatmentValue.setObjectName("labelOthersMeridianTreatmentValue")
        self.lineEditOthersMeridianTreatmentValue = QtWidgets.QLineEdit(self.groupBoxOthers)
        self.lineEditOthersMeridianTreatmentValue.setGeometry(QtCore.QRect(210, 160, 100, 27))
        self.lineEditOthersMeridianTreatmentValue.setMaxLength(12)
        self.lineEditOthersMeridianTreatmentValue.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEditOthersMeridianTreatmentValue.setObjectName("lineEditOthersMeridianTreatmentValue")
        self.pushButtonWriteSummerTime = QtWidgets.QPushButton(self.groupBoxOthers)
        self.pushButtonWriteSummerTime.setGeometry(QtCore.QRect(330, 40, 110, 27))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonWriteSummerTime.setFont(font)
        self.pushButtonWriteSummerTime.setObjectName("pushButtonWriteSummerTime")
        self.pushButtonWriteAltitudeLimit = QtWidgets.QPushButton(self.groupBoxOthers)
        self.pushButtonWriteAltitudeLimit.setGeometry(QtCore.QRect(330, 80, 110, 27))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonWriteAltitudeLimit.setFont(font)
        self.pushButtonWriteAltitudeLimit.setObjectName("pushButtonWriteAltitudeLimit")
        self.pushButtonWriteMeridianTreatment = QtWidgets.QPushButton(self.groupBoxOthers)
        self.pushButtonWriteMeridianTreatment.setGeometry(QtCore.QRect(330, 140, 110, 27))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButtonWriteMeridianTreatment.setFont(font)
        self.pushButtonWriteMeridianTreatment.setObjectName("pushButtonWriteMeridianTreatment")
        self.comboBoxOthersMeridianTreatmentStopFlip = QtWidgets.QComboBox(self.groupBoxOthers)
        self.comboBoxOthersMeridianTreatmentStopFlip.setGeometry(QtCore.QRect(210, 120, 100, 27))
        self.comboBoxOthersMeridianTreatmentStopFlip.setObjectName("comboBoxOthersMeridianTreatmentStopFlip")
        self.comboBoxOthersMeridianTreatmentStopFlip.addItem("")
        self.comboBoxOthersMeridianTreatmentStopFlip.addItem("")
        self.comboBoxOthersSummerTime = QtWidgets.QComboBox(self.groupBoxOthers)
        self.comboBoxOthersSummerTime.setGeometry(QtCore.QRect(210, 40, 100, 27))
        self.comboBoxOthersSummerTime.setObjectName("comboBoxOthersSummerTime")
        self.comboBoxOthersSummerTime.addItem("")
        self.comboBoxOthersSummerTime.addItem("")
        self.tabWidget.addTab(self.tabSpezialSettings, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1024, 24))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.menubar.setFont(font)
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuMount = QtWidgets.QMenu(self.menubar)
        self.menuMount.setObjectName("menuMount")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.actionReadSessionLog = QtWidgets.QAction(MainWindow)
        self.actionReadSessionLog.setEnabled(False)
        self.actionReadSessionLog.setObjectName("actionReadSessionLog")
        self.actionReadErrorLog = QtWidgets.QAction(MainWindow)
        self.actionReadErrorLog.setEnabled(False)
        self.actionReadErrorLog.setObjectName("actionReadErrorLog")
        self.actionExitApplication = QtWidgets.QAction(MainWindow)
        self.actionExitApplication.setObjectName("actionExitApplication")
        self.actionMountConnect = QtWidgets.QAction(MainWindow)
        self.actionMountConnect.setObjectName("actionMountConnect")
        self.actionMountDisconnect = QtWidgets.QAction(MainWindow)
        self.actionMountDisconnect.setObjectName("actionMountDisconnect")
        self.actionHelp = QtWidgets.QAction(MainWindow)
        self.actionHelp.setEnabled(False)
        self.actionHelp.setObjectName("actionHelp")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setEnabled(True)
        self.actionAbout.setObjectName("actionAbout")
        self.actionResizeApp = QtWidgets.QAction(MainWindow)
        self.actionResizeApp.setEnabled(False)
        self.actionResizeApp.setObjectName("actionResizeApp")
        self.actionSetup = QtWidgets.QAction(MainWindow)
        self.actionSetup.setObjectName("actionSetup")
        self.actionRedVersion = QtWidgets.QAction(MainWindow)
        self.actionRedVersion.setObjectName("actionRedVersion")
        self.actionGrayVersion = QtWidgets.QAction(MainWindow)
        self.actionGrayVersion.setObjectName("actionGrayVersion")
        self.actionGreenVersion = QtWidgets.QAction(MainWindow)
        self.actionGreenVersion.setObjectName("actionGreenVersion")
        self.actionWifiSearchAndConnect = QtWidgets.QAction(MainWindow)
        self.actionWifiSearchAndConnect.setEnabled(False)
        self.actionWifiSearchAndConnect.setObjectName("actionWifiSearchAndConnect")
        self.actionReadLogFile = QtWidgets.QAction(MainWindow)
        self.actionReadLogFile.setEnabled(True)
        self.actionReadLogFile.setObjectName("actionReadLogFile")
        self.actionBlueVersion = QtWidgets.QAction(MainWindow)
        self.actionBlueVersion.setObjectName("actionBlueVersion")
        self.actionCyanVersion = QtWidgets.QAction(MainWindow)
        self.actionCyanVersion.setObjectName("actionCyanVersion")
        self.actionMagentaVersion = QtWidgets.QAction(MainWindow)
        self.actionMagentaVersion.setObjectName("actionMagentaVersion")
        self.actionYellowVersion = QtWidgets.QAction(MainWindow)
        self.actionYellowVersion.setObjectName("actionYellowVersion")
        self.menuFile.addAction(self.actionReadLogFile)
        self.menuFile.addAction(self.actionExitApplication)
        self.menuMount.addSeparator()
        self.menuMount.addAction(self.actionWifiSearchAndConnect)
        self.menuMount.addSeparator()
        self.menuMount.addAction(self.actionMountConnect)
        self.menuMount.addAction(self.actionMountDisconnect)
        self.menuEdit.addAction(self.actionResizeApp)
        self.menuEdit.addAction(self.actionSetup)
        self.menuView.addAction(self.actionRedVersion)
        self.menuView.addAction(self.actionGreenVersion)
        self.menuView.addAction(self.actionBlueVersion)
        self.menuView.addAction(self.actionCyanVersion)
        self.menuView.addAction(self.actionMagentaVersion)
        self.menuView.addAction(self.actionYellowVersion)
        self.menuView.addAction(self.actionGrayVersion)
        self.menuHelp.addAction(self.actionHelp)
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuMount.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.tabWidget, self.lineEditDate)
        MainWindow.setTabOrder(self.lineEditDate, self.lineEditTime)
        MainWindow.setTabOrder(self.lineEditTime, self.lineEditTimeZone)
        MainWindow.setTabOrder(self.lineEditTimeZone, self.lineEditLongitude)
        MainWindow.setTabOrder(self.lineEditLongitude, self.lineEditLatitude)
        MainWindow.setTabOrder(self.lineEditLatitude, self.lineEditRA)
        MainWindow.setTabOrder(self.lineEditRA, self.lineEditDEC)
        MainWindow.setTabOrder(self.lineEditDEC, self.lineEditAZI)
        MainWindow.setTabOrder(self.lineEditAZI, self.lineEditALT)
        MainWindow.setTabOrder(self.lineEditALT, self.lineEditSavedTR)
        MainWindow.setTabOrder(self.lineEditSavedTR, self.lineEditSummerTime)
        MainWindow.setTabOrder(self.lineEditSummerTime, self.lineEditPier)
        MainWindow.setTabOrder(self.lineEditPier, self.lineEditPointingState)
        MainWindow.setTabOrder(self.lineEditPointingState, self.lineEditAltitudeLimitInfo)
        MainWindow.setTabOrder(self.lineEditAltitudeLimitInfo, self.lineEditTreatmentStopFlip)
        MainWindow.setTabOrder(self.lineEditTreatmentStopFlip, self.lineEditTreatmentValue)
        MainWindow.setTabOrder(self.lineEditTreatmentValue, self.lineEditFirmwareMainboard)
        MainWindow.setTabOrder(self.lineEditFirmwareMainboard, self.lineEditFirmwareHandcontroller)
        MainWindow.setTabOrder(self.lineEditFirmwareHandcontroller, self.lineEditFirmwareMotorRA)
        MainWindow.setTabOrder(self.lineEditFirmwareMotorRA, self.lineEditFirmwareMotorDEC)
        MainWindow.setTabOrder(self.lineEditFirmwareMotorDEC, self.radioButton1x)
        MainWindow.setTabOrder(self.radioButton1x, self.radioButton2x)
        MainWindow.setTabOrder(self.radioButton2x, self.radioButton8x)
        MainWindow.setTabOrder(self.radioButton8x, self.radioButton16x)
        MainWindow.setTabOrder(self.radioButton16x, self.radioButton64x)
        MainWindow.setTabOrder(self.radioButton64x, self.radioButton128x)
        MainWindow.setTabOrder(self.radioButton128x, self.radioButton256x)
        MainWindow.setTabOrder(self.radioButton256x, self.radioButton512x)
        MainWindow.setTabOrder(self.radioButton512x, self.radioButtonMax)
        MainWindow.setTabOrder(self.radioButtonMax, self.pushButtonNorthWest)
        MainWindow.setTabOrder(self.pushButtonNorthWest, self.pushButtonNorth)
        MainWindow.setTabOrder(self.pushButtonNorth, self.pushButtonNorthEast)
        MainWindow.setTabOrder(self.pushButtonNorthEast, self.pushButtonWest)
        MainWindow.setTabOrder(self.pushButtonWest, self.pushButtonStop)
        MainWindow.setTabOrder(self.pushButtonStop, self.pushButtonEast)
        MainWindow.setTabOrder(self.pushButtonEast, self.pushButtonSouthWest)
        MainWindow.setTabOrder(self.pushButtonSouthWest, self.pushButtonSouth)
        MainWindow.setTabOrder(self.pushButtonSouth, self.pushButtonSouthEast)
        MainWindow.setTabOrder(self.pushButtonSouthEast, self.pushButtonTracking)
        MainWindow.setTabOrder(self.pushButtonTracking, self.pushButtonZeroPosition)
        MainWindow.setTabOrder(self.pushButtonZeroPosition, self.pushButtonParkPosition)
        MainWindow.setTabOrder(self.pushButtonParkPosition, self.pushButtonUnpark)
        MainWindow.setTabOrder(self.pushButtonUnpark, self.pushButtonSynchronizeMount)
        MainWindow.setTabOrder(self.pushButtonSynchronizeMount, self.lineEditSetDate)
        MainWindow.setTabOrder(self.lineEditSetDate, self.lineEditSetTime)
        MainWindow.setTabOrder(self.lineEditSetTime, self.lineEditSetTimeZone)
        MainWindow.setTabOrder(self.lineEditSetTimeZone, self.lineEditSetLatitude)
        MainWindow.setTabOrder(self.lineEditSetLatitude, self.lineEditSetLongitude)
        MainWindow.setTabOrder(self.lineEditSetLongitude, self.pushButtonWriteDateTime)
        MainWindow.setTabOrder(self.pushButtonWriteDateTime, self.pushButtonWriteTimeZone)
        MainWindow.setTabOrder(self.pushButtonWriteTimeZone, self.pushButtonWriteLatitude)
        MainWindow.setTabOrder(self.pushButtonWriteLatitude, self.pushButtonWriteLongitude)
        MainWindow.setTabOrder(self.pushButtonWriteLongitude, self.lineEditSetRA)
        MainWindow.setTabOrder(self.lineEditSetRA, self.lineEditSetDEC)
        MainWindow.setTabOrder(self.lineEditSetDEC, self.lineEditSetAZI)
        MainWindow.setTabOrder(self.lineEditSetAZI, self.lineEditSetALT)
        MainWindow.setTabOrder(self.lineEditSetALT, self.pushButtonWriteRaDec)
        MainWindow.setTabOrder(self.pushButtonWriteRaDec, self.pushButtonWriteAziAlt)
        MainWindow.setTabOrder(self.pushButtonWriteAziAlt, self.pushButtonReadDateAndTimeFromPC)
        MainWindow.setTabOrder(self.pushButtonReadDateAndTimeFromPC, self.lineEditDatePC)
        MainWindow.setTabOrder(self.lineEditDatePC, self.lineEditTimePC)
        MainWindow.setTabOrder(self.lineEditTimePC, self.pushButtonSetDateAndTimeFromPC)
        MainWindow.setTabOrder(self.pushButtonSetDateAndTimeFromPC, self.lineEditTrackingRateValue)
        MainWindow.setTabOrder(self.lineEditTrackingRateValue, self.pushButtonWriteTrakingRateValue)
        MainWindow.setTabOrder(self.pushButtonWriteTrakingRateValue, self.radioButtonTrackingSideral)
        MainWindow.setTabOrder(self.radioButtonTrackingSideral, self.radioButtonTrackingLunar)
        MainWindow.setTabOrder(self.radioButtonTrackingLunar, self.radioButtonTrackingSolar)
        MainWindow.setTabOrder(self.radioButtonTrackingSolar, self.radioButtonTrackingKing)
        MainWindow.setTabOrder(self.radioButtonTrackingKing, self.radioButtonTrackingCustom)
        MainWindow.setTabOrder(self.radioButtonTrackingCustom, self.comboBoxOthersSummerTime)
        MainWindow.setTabOrder(self.comboBoxOthersSummerTime, self.lineEditOthersAltitudeLimit)
        MainWindow.setTabOrder(self.lineEditOthersAltitudeLimit, self.comboBoxOthersMeridianTreatmentStopFlip)
        MainWindow.setTabOrder(self.comboBoxOthersMeridianTreatmentStopFlip, self.lineEditOthersMeridianTreatmentValue)
        MainWindow.setTabOrder(self.lineEditOthersMeridianTreatmentValue, self.pushButtonWriteSummerTime)
        MainWindow.setTabOrder(self.pushButtonWriteSummerTime, self.pushButtonWriteAltitudeLimit)
        MainWindow.setTabOrder(self.pushButtonWriteAltitudeLimit, self.pushButtonWriteMeridianTreatment)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "my private linux iOptron mount commander - liomoco"))
        self.groupBoxGeneralInformation.setTitle(_translate("MainWindow", "General Information"))
        self.labelGeneralInformtionModel.setText(_translate("MainWindow", "Model: none"))
        self.labelGeneralInformtionStatus.setText(_translate("MainWindow", "System Status: offline"))
        self.labelGeneralInformationTracking.setText(_translate("MainWindow", "Tracking Rate: none"))
        self.labelGeneralInformationTime.setText(_translate("MainWindow", "Time Source: none"))
        self.labelGeneralInformtionGPS.setText(_translate("MainWindow", "GPS: none"))
        self.labelGeneralInformtionHemisphere.setText(_translate("MainWindow", "Hemisphere: none"))
        self.labelGeneralInformtionMountStatus.setText(_translate("MainWindow", "Mount Status: offline"))
        self.labelGeneralInformationEncoders.setText(_translate("MainWindow", "Encoders: none"))
        self.groupBoxMountInformation.setTitle(_translate("MainWindow", "Mount Information "))
        self.labelDate.setText(_translate("MainWindow", "Date"))
        self.labelTime.setText(_translate("MainWindow", "Time"))
        self.lineEditDate.setText(_translate("MainWindow", "dd.mm.yyyy"))
        self.lineEditTime.setText(_translate("MainWindow", "hh:mm:ss"))
        self.lineEditTimeZone.setText(_translate("MainWindow", "+000"))
        self.labelTimeZone.setText(_translate("MainWindow", "Time Zone"))
        self.labelLatitude.setText(_translate("MainWindow", "Latitude"))
        self.labelLongitude.setText(_translate("MainWindow", "Longitude"))
        self.labelRA.setText(_translate("MainWindow", "RA"))
        self.labelDEC.setText(_translate("MainWindow", "DEC"))
        self.labelALT.setText(_translate("MainWindow", "ALT"))
        self.labelAZI.setText(_translate("MainWindow", "AZI"))
        self.labelCustomSavedTR.setText(_translate("MainWindow", "Custom Saved TR"))
        self.labelSummerTime.setText(_translate("MainWindow", "Summer Time"))
        self.labelPier.setText(_translate("MainWindow", "Pier"))
        self.labelPointingState.setText(_translate("MainWindow", "Pointing State"))
        self.labelAltitudeLimitInfo.setText(_translate("MainWindow", "Altitude Limit Info"))
        self.labelMeridianTreatment.setText(_translate("MainWindow", "Meridian Treatment"))
        self.labelFirmwareMainboard.setText(_translate("MainWindow", "Firmware Mainboard"))
        self.labelFirmwareHandcontroller.setText(_translate("MainWindow", "Firmware Handcontroller"))
        self.lineEditSummerTime.setText(_translate("MainWindow", "False"))
        self.lineEditSavedTR.setText(_translate("MainWindow", "n.nnnn"))
        self.labelFirmwareMotorRA.setText(_translate("MainWindow", "Firmware Motor RA"))
        self.lineEditLatitude.setText(_translate("MainWindow", "N00°00\'00\'\'"))
        self.lineEditLongitude.setText(_translate("MainWindow", "E000°00\'00\'\'"))
        self.lineEditRA.setText(_translate("MainWindow", "00h00m00s"))
        self.lineEditDEC.setText(_translate("MainWindow", "+00°00\'00\'\'"))
        self.lineEditALT.setText(_translate("MainWindow", "+00°00\'00\'\'"))
        self.lineEditAZI.setText(_translate("MainWindow", "+000°00\'00\'\'"))
        self.lineEditPointingState.setText(_translate("MainWindow", "none"))
        self.lineEditFirmwareHandcontroller.setText(_translate("MainWindow", "none"))
        self.lineEditAltitudeLimitInfo.setText(_translate("MainWindow", "00°"))
        self.lineEditTreatmentStopFlip.setText(_translate("MainWindow", "none"))
        self.lineEditFirmwareMotorRA.setText(_translate("MainWindow", "none"))
        self.lineEditPier.setText(_translate("MainWindow", "none"))
        self.lineEditFirmwareMainboard.setText(_translate("MainWindow", "none"))
        self.lineEditTreatmentValue.setText(_translate("MainWindow", "none"))
        self.labelFirmwareMotorDEC.setText(_translate("MainWindow", "Firmware Motor DEC"))
        self.lineEditFirmwareMotorDEC.setText(_translate("MainWindow", "none"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabMountInformation), _translate("MainWindow", "Mount information"))
        self.groupBoxMountMoveDirection.setTitle(_translate("MainWindow", "Mount move"))
        self.pushButtonStop.setText(_translate("MainWindow", "STOP"))
        self.pushButtonWest.setText(_translate("MainWindow", "W"))
        self.pushButtonEast.setText(_translate("MainWindow", "E"))
        self.pushButtonNorth.setText(_translate("MainWindow", "N"))
        self.pushButtonSouth.setText(_translate("MainWindow", "S"))
        self.pushButtonNorthEast.setText(_translate("MainWindow", "NE"))
        self.pushButtonNorthWest.setText(_translate("MainWindow", "NW"))
        self.pushButtonSouthEast.setText(_translate("MainWindow", "SE"))
        self.pushButtonSouthWest.setText(_translate("MainWindow", "SW"))
        self.groupBoxSetSpeed.setTitle(_translate("MainWindow", "Speed set"))
        self.radioButton1x.setText(_translate("MainWindow", "1x"))
        self.radioButton2x.setText(_translate("MainWindow", "2x"))
        self.radioButton8x.setText(_translate("MainWindow", "8x"))
        self.radioButton16x.setText(_translate("MainWindow", "16x"))
        self.radioButton64x.setText(_translate("MainWindow", "64x"))
        self.radioButton128x.setText(_translate("MainWindow", "128x"))
        self.radioButton256x.setText(_translate("MainWindow", "256x"))
        self.radioButton512x.setText(_translate("MainWindow", "512x"))
        self.radioButtonMax.setText(_translate("MainWindow", "Max"))
        self.groupBoxSetSpezial.setTitle(_translate("MainWindow", "Spezial"))
        self.pushButtonTracking.setText(_translate("MainWindow", "Tracking start/stop"))
        self.pushButtonZeroPosition.setText(_translate("MainWindow", "Zero Position"))
        self.pushButtonParkPosition.setText(_translate("MainWindow", "Park Position"))
        self.pushButtonUnpark.setText(_translate("MainWindow", "Unpark"))
        self.pushButtonSynchronizeMount.setText(_translate("MainWindow", "Synchronize Mount"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabMove), _translate("MainWindow", "Mount move"))
        self.groupBoxDateAndTime.setTitle(_translate("MainWindow", "Date and Time"))
        self.lineEditSetTimeZone.setText(_translate("MainWindow", "+000"))
        self.lineEditSetLongitude.setText(_translate("MainWindow", "E000°00\'00\'\'"))
        self.labelSetTimeZone.setText(_translate("MainWindow", "Time Zone"))
        self.labelSetLatitude.setText(_translate("MainWindow", "Latitude"))
        self.lineEditSetLatitude.setText(_translate("MainWindow", "N00°00\'00\'\'"))
        self.labelSetDate.setText(_translate("MainWindow", "Date"))
        self.lineEditSetDate.setText(_translate("MainWindow", "dd.mm.yyyy"))
        self.lineEditSetTime.setText(_translate("MainWindow", "hh:mm:ss"))
        self.labelSetTime.setText(_translate("MainWindow", "Time"))
        self.labelSetLongitude.setText(_translate("MainWindow", "Longitude"))
        self.pushButtonWriteDateTime.setText(_translate("MainWindow", "write value"))
        self.pushButtonWriteTimeZone.setText(_translate("MainWindow", "write value"))
        self.pushButtonWriteLatitude.setText(_translate("MainWindow", "write value"))
        self.pushButtonWriteLongitude.setText(_translate("MainWindow", "write value"))
        self.groupBoxKoordinates.setTitle(_translate("MainWindow", "Koordinates"))
        self.labelSetRA.setText(_translate("MainWindow", "RA"))
        self.lineEditSetDEC.setText(_translate("MainWindow", "+00°00\'00\'\'"))
        self.lineEditSetAZI.setText(_translate("MainWindow", "000°00\'00\'\'"))
        self.labelSetALT.setText(_translate("MainWindow", "ALT"))
        self.lineEditSetALT.setText(_translate("MainWindow", "00°00\'00\'\'"))
        self.lineEditSetRA.setText(_translate("MainWindow", "00h00m00s"))
        self.labelSetDEC.setText(_translate("MainWindow", "DEC"))
        self.labelSetAZI.setText(_translate("MainWindow", "AZI"))
        self.pushButtonWriteRaDec.setText(_translate("MainWindow", "write value"))
        self.pushButtonWriteAziAlt.setText(_translate("MainWindow", "write value"))
        self.groupBoxDateTimePosition.setTitle(_translate("MainWindow", "Date and Time PC"))
        self.pushButtonReadDateAndTimeFromPC.setText(_translate("MainWindow", "Read Date and Time from PC"))
        self.pushButtonSetDateAndTimeFromPC.setText(_translate("MainWindow", "Set Date and Time from PC"))
        self.lineEditDatePC.setText(_translate("MainWindow", "dd.mm.yyyy"))
        self.lineEditTimePC.setText(_translate("MainWindow", "hh:mm:ss"))
        self.labelGPSActiv.setText(_translate("MainWindow", "GPS activ"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabGeneralSettings), _translate("MainWindow", "Settings 1"))
        self.groupBoxTracking.setTitle(_translate("MainWindow", "Tracking"))
        self.labelssTrackingRate.setText(_translate("MainWindow", "Rate"))
        self.lineEditTrackingRateValue.setText(_translate("MainWindow", "n.nnnnn"))
        self.radioButtonTrackingSideral.setText(_translate("MainWindow", "sidereal"))
        self.radioButtonTrackingLunar.setText(_translate("MainWindow", "lunar"))
        self.radioButtonTrackingSolar.setText(_translate("MainWindow", "solar"))
        self.radioButtonTrackingKing.setText(_translate("MainWindow", "King"))
        self.radioButtonTrackingCustom.setText(_translate("MainWindow", "custom"))
        self.pushButtonWriteTrakingRateValue.setText(_translate("MainWindow", "write value"))
        self.groupBoxOthers.setTitle(_translate("MainWindow", "Others"))
        self.labelOthersSummerTime.setText(_translate("MainWindow", "Summer Time"))
        self.labelOthersAltitudeLimit.setText(_translate("MainWindow", "Altitude Limit"))
        self.lineEditOthersAltitudeLimit.setText(_translate("MainWindow", "00°"))
        self.labelOthersMeridianTreatmentStopFlip.setText(_translate("MainWindow", "Meridian Treatment"))
        self.labelOthersMeridianTreatmentValue.setText(_translate("MainWindow", "Meridian Treatment"))
        self.lineEditOthersMeridianTreatmentValue.setText(_translate("MainWindow", "15°"))
        self.pushButtonWriteSummerTime.setText(_translate("MainWindow", "write value"))
        self.pushButtonWriteAltitudeLimit.setText(_translate("MainWindow", "write value"))
        self.pushButtonWriteMeridianTreatment.setText(_translate("MainWindow", "write value"))
        self.comboBoxOthersMeridianTreatmentStopFlip.setItemText(0, _translate("MainWindow", "stop"))
        self.comboBoxOthersMeridianTreatmentStopFlip.setItemText(1, _translate("MainWindow", "flip"))
        self.comboBoxOthersSummerTime.setItemText(0, _translate("MainWindow", "yes"))
        self.comboBoxOthersSummerTime.setItemText(1, _translate("MainWindow", "no"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabSpezialSettings), _translate("MainWindow", "Settings 2"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuMount.setTitle(_translate("MainWindow", "Mount"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionReadSessionLog.setText(_translate("MainWindow", "Read session.log"))
        self.actionReadErrorLog.setText(_translate("MainWindow", "Read error.log"))
        self.actionExitApplication.setText(_translate("MainWindow", "Quit"))
        self.actionMountConnect.setText(_translate("MainWindow", "Mount connect"))
        self.actionMountDisconnect.setText(_translate("MainWindow", "Mount disconnect"))
        self.actionHelp.setText(_translate("MainWindow", "Help"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionResizeApp.setText(_translate("MainWindow", "Resize App"))
        self.actionSetup.setText(_translate("MainWindow", "Setup"))
        self.actionRedVersion.setText(_translate("MainWindow", "Red Version"))
        self.actionGrayVersion.setText(_translate("MainWindow", "Gray Version"))
        self.actionGreenVersion.setText(_translate("MainWindow", "Green Version"))
        self.actionWifiSearchAndConnect.setText(_translate("MainWindow", "Wifi search and connect"))
        self.actionReadLogFile.setText(_translate("MainWindow", "Read log file"))
        self.actionBlueVersion.setText(_translate("MainWindow", "Blue Version"))
        self.actionCyanVersion.setText(_translate("MainWindow", "Cyan Version"))
        self.actionMagentaVersion.setText(_translate("MainWindow", "Magenta Version"))
        self.actionYellowVersion.setText(_translate("MainWindow", "Yellow Version"))

        def __del__(self):
            logging.debug('program is closed')

# **************************************************************************************
# Timer init

        self.labelGPSActiv.setVisible(False)
        self.timerPollingOffset = 0
        self.timerCycle = 0
        self.timerPollingCoordinates = QTimer()
        self.timerPollingCoordinates.timeout.connect(self.refreshCoordinates)
        self.t1 = None
        self.t2 = None
        self.t3 = None
        self.t4 = None
#        print(strftime("%d.%m.%Y %H:%M:%S"))

# **************************************************************************************
# Menu functions

        self.actionReadLogFile.triggered.connect(self.openReadLogFile)
        self.actionExitApplication.triggered.connect(self.exitApplication)
        
        self.actionWifiSearchAndConnect.triggered.connect(self.wifiSearchAndConnect)
        self.actionMountConnect.triggered.connect(self.connectMount)
        self.actionMountDisconnect.triggered.connect(self.disconnectMount)

        self.actionSetup.triggered.connect(self.openSetupDialog)

        self.actionRedVersion.triggered.connect(self.changeRedVersionView)
        self.actionGreenVersion.triggered.connect(self.changeGreenVersionView)
        self.actionBlueVersion.triggered.connect(self.changeBlueVersionView)
        self.actionCyanVersion.triggered.connect(self.changeCyanVersionView)
        self.actionMagentaVersion.triggered.connect(self.changeMagentaVersionView)
        self.actionYellowVersion.triggered.connect(self.changeYellowVersionView)
        self.actionGrayVersion.triggered.connect(self.changeGrayVersionView)

        self.actionAbout.triggered.connect(self.viewAbout)

# **************************************************************************************
# RadioButton and PushButton functions

        self.pushButtonStop.clicked.connect(self.buttonStopClicked)
        self.pushButtonNorthWest.clicked.connect(self.buttonNorthWestClicked)
        self.pushButtonNorth.clicked.connect(self.buttonNorthClicked)
        self.pushButtonNorthEast.clicked.connect(self.buttonNorthEastClicked)
        self.pushButtonWest.clicked.connect(self.buttonWestClicked)
        self.pushButtonEast.clicked.connect(self.buttonEastClicked)
        self.pushButtonSouthWest.clicked.connect(self.buttonSouthWestClicked)
        self.pushButtonSouth.clicked.connect(self.buttonSouthClicked)
        self.pushButtonSouthEast.clicked.connect(self.buttonSouthEastClicked)

        self.pushButtonTracking.clicked.connect(self.buttonTrackingStartStopClicked)
        self.pushButtonZeroPosition.clicked.connect(self.buttonZeroPositionClicked)
        self.pushButtonParkPosition.clicked.connect(self.buttonParkPositionClicked)
        self.pushButtonUnpark.clicked.connect(self.buttonUnparkClicked)
        self.pushButtonSynchronizeMount.clicked.connect(self.buttonSynchronizeMountClicked)

        self.radioButton1x.toggled.connect(self.rBSpeed1xClicked)
        self.radioButton2x.toggled.connect(self.rBSpeed2xClicked)
        self.radioButton8x.toggled.connect(self.rBSpeed8xClicked)
        self.radioButton16x.toggled.connect(self.rBSpeed16xClicked)
        self.radioButton64x.toggled.connect(self.rBSpeed64xClicked)
        self.radioButton128x.toggled.connect(self.rBSpeed128xClicked)
        self.radioButton256x.toggled.connect(self.rBSpeed256xClicked)
        self.radioButton512x.toggled.connect(self.rBSpeed512xClicked)
        self.radioButtonMax.toggled.connect(self.rBSpeedMaxClicked)

        self.radioButtonTrackingSideral.toggled.connect(self.rBTrackingSideralClicked)
        self.radioButtonTrackingLunar.toggled.connect(self.rBTrackingLunarClicked)
        self.radioButtonTrackingSolar.toggled.connect(self.rBTrackingSolarClicked)
        self.radioButtonTrackingKing.toggled.connect(self.rBTrackingKingClicked)
        self.radioButtonTrackingCustom.toggled.connect(self.rBTrackingCustomClicked)

        self.pushButtonWriteDateTime.clicked.connect(self.buttonWriteDateTime)
        self.pushButtonWriteTimeZone.clicked.connect(self.buttonWriteTimeZone)
        self.pushButtonWriteLatitude.clicked.connect(self.buttonWriteLatitude)
        self.pushButtonWriteLongitude.clicked.connect(self.buttonWriteLongitude)
        self.pushButtonWriteRaDec.clicked.connect(self.buttonWriteRaDec)
        self.pushButtonWriteAziAlt.clicked.connect(self.buttonWriteAziAlt)
        self.pushButtonReadDateAndTimeFromPC.clicked.connect(self.buttonReadDateAndTimeFromPC)
        self.pushButtonSetDateAndTimeFromPC.clicked.connect(self.buttonSetDateAndTimeFromPC)
        
        self.pushButtonWriteSummerTime.clicked.connect(self.buttonWriteSummerTime)
        self.pushButtonWriteAltitudeLimit.clicked.connect(self.buttonWriteAltitudeLimit)
        self.pushButtonWriteMeridianTreatment.clicked.connect(self.buttonWriteMeridianTreatmentStopFlip)

        self.disableLineEdits()

# **************************************************************************************
# first visible initialisations

    def enableGroupBoxes(self):
        '''Method enables groupBoxes, if the mount is connected.'''
        self.groupBoxMountInformation.setEnabled(True)
        self.groupBoxSetSpeed.setEnabled(True)
        self.groupBoxMountMoveDirection.setEnabled(True)
        self.groupBoxSetSpezial.setEnabled(True)
        self.groupBoxDateAndTime.setEnabled(True)
        self.groupBoxKoordinates.setEnabled(True)
        self.groupBoxTracking.setEnabled(True)
        self.groupBoxOthers.setEnabled(True)

    def disableGroupBoxes(self):
        '''Method enables groupBoxes, if the mount is disconnected.'''
        self.groupBoxMountInformation.setEnabled(False)
        self.groupBoxSetSpeed.setEnabled(False)
        self.groupBoxMountMoveDirection.setEnabled(False)
        self.groupBoxSetSpezial.setEnabled(False)
        self.groupBoxDateAndTime.setEnabled(False)
        self.groupBoxKoordinates.setEnabled(False)
        self.groupBoxTracking.setEnabled(False)
        self.groupBoxOthers.setEnabled(False)

    def disableLineEdits(self):
        '''Method disenables lineEdit fileds, that not for editable intended.'''
        self.lineEditDate.setEnabled(False)
        self.lineEditTime.setEnabled(False)
        self.lineEditTimeZone.setEnabled(False)
        self.lineEditLongitude.setEnabled(False)
        self.lineEditLatitude.setEnabled(False)
        self.lineEditRA.setEnabled(False)
        self.lineEditDEC.setEnabled(False)
        self.lineEditAZI.setEnabled(False)
        self.lineEditALT.setEnabled(False)
        self.lineEditSavedTR.setEnabled(False)
        self.lineEditSummerTime.setEnabled(False)
        self.lineEditPier.setEnabled(False)
        self.lineEditPointingState.setEnabled(False)
        self.lineEditAltitudeLimitInfo.setEnabled(False)
        self.lineEditTreatmentStopFlip.setEnabled(False)
        self.lineEditTreatmentValue.setEnabled(False)
        self.lineEditFirmwareMainboard.setEnabled(False)
        self.lineEditFirmwareHandcontroller.setEnabled(False)
        self.lineEditFirmwareMotorRA.setEnabled(False)
        self.lineEditFirmwareMotorDEC.setEnabled(False)

# **************************************************************************************
# File-Menu funtions

    def openReadLogFile(self):
        '''Method open the logfile.log.'''
        dlg = LogFileRead()
        dlg.exec()

    def exitApplication(self):
        if self.scope != None:
            if self.scope.scope.mountIsConnected:
                self.scope.scope.close()
                self.timerPollingCoordinates.stop()
        logging.debug('program is closed')
        MainWindow.close()


# **************************************************************************************
# Mount-Menu funtions

    def wifiSearchAndConnect(self):
        '''For this method I have no idea.'''
        info = PopupDialog('INFO: Wifi', 'This Funktion is not impemented.', 50, self.colScheme)
        info.exec()

    def connectMount(self):
        '''Method to connect the mount via USB or WLAN.'''
        self.scope = Ioptron()
        self.enableGroupBoxes()
        self.disableLineEdits()
        self.scanStatus()
        if self.scope.config['PollRefresh'] == '1:1':
            self.timerPollingOffset = 1
        elif self.scope.config['PollRefresh'] == '1:5':
            self.timerPollingOffset = 5
        elif self.scope.config['PollRefresh'] == '1:10':
            self.timerPollingOffset = 10
        elif self.scope.config['PollRefresh'] == '1:30':
            self.timerPollingOffset = 30
        else:
            self.timerPollingOffset = 0
        self.timerPollingCoordinates.start(1000)

    def disconnectMount(self):
        '''Method disconnect the mount if it is connected.'''
        if self.scope != None:
            self.labelGeneralInformtionModel.setText('Mount Model: none')
            self.labelGeneralInformtionMountStatus.setText('Mount Status: offline')
            self.labelGeneralInformationTracking.setText('Tracking: none')
            self.labelGeneralInformtionStatus.setText('Status: offline')
            self.labelGeneralInformationEncoders.setText('Encoders: none')
            self.labelGeneralInformationTime.setText('Time Source: none')
            self.labelGeneralInformtionGPS.setText('GPS: none')
            self.labelGeneralInformtionHemisphere.setText('Hemisphere: none')
            self.disableGroupBoxes()
            self.labelGPSActiv.setVisible(False)
            self.pushButtonSetDateAndTimeFromPC.setEnabled(False)
            self.timerPollingCoordinates.stop()
            self.scope.scope.close()
            self.scope = None
            logging.info('Mount are disconnected.')
            info = PopupDialog('INFO: Disconnection', 'Mount are disconnected.', 20, self.colScheme)
            info.exec()
        else:
            info = PopupDialog('INFO: Connection', 'Mount is not connected yet.', 20, self.colScheme)
            info.exec()


# **************************************************************************************
# Edit-Menu funtions

    def openSetupDialog(self):
        '''Method open the setup dialog.'''
        dlg = SetupDialog('Setup')
        dlg.exec()
        if dlg.connChanged and self.scope != None:
            if self.scope.mountIsConnected:
                self.disconnectMount()


# **************************************************************************************
# View-Menu funtions

    def setColorGeneralInformation(self, colScheme):
        fontColor = ''
        if   colScheme == 'red':
            fontColor = '#00C0C0'
        elif colScheme == 'green':
            fontColor = '#C000C0'
        elif colScheme == 'blue':
            fontColor = '#C0C000'
        elif colScheme == 'cyan':
            fontColor = '#C00000'
        elif colScheme == 'magenta':
            fontColor = '#00C000'
        elif colScheme == 'yellow':
            fontColor = '#0000C0'
        elif colScheme == 'gray':
            fontColor = '#C0C0C0'

        self.labelGeneralInformtionModel.setStyleSheet("font-size: 18px; font-weight: bold; color: " + fontColor)
        self.labelGeneralInformtionMountStatus.setStyleSheet("font-size: 18px; font-weight: bold; color: " + fontColor)
        self.labelGeneralInformationTracking.setStyleSheet("font-size: 18px; font-weight: bold; color: " + fontColor)
        self.labelGeneralInformtionStatus.setStyleSheet("font-size: 18px; font-weight: bold; color: " + fontColor)
        self.labelGeneralInformationEncoders.setStyleSheet("font-size: 18px; font-weight: bold; color: " + fontColor)
        self.labelGeneralInformationTime.setStyleSheet("font-size: 18px; font-weight: bold; color: " + fontColor)
        self.labelGeneralInformtionGPS.setStyleSheet("font-size: 18px; font-weight: bold; color: " + fontColor)
        self.labelGeneralInformtionHemisphere.setStyleSheet("font-size: 18px; font-weight: bold; color: " + fontColor)

    def changeRedVersionView(self):
        '''Method change the GUI colors to a red scheme.'''
        self.colScheme = 'red'
        self.setColorGeneralInformation(self.colScheme)
        self.centralwidget.setStyleSheet(colorWidgetScheme('red'))
        self.menubar.setStyleSheet(colorMenuScheme('red'))
        info = PopupDialog('Black Scheme', 'Scheme red ist enabled.', 10, self.colScheme)
        info.exec()

    def changeGreenVersionView(self):
        '''Method change the GUI colors to a green scheme.'''
        self.colScheme = 'green'
        self.setColorGeneralInformation(self.colScheme)
        self.centralwidget.setStyleSheet(colorWidgetScheme('green'))
        self.menubar.setStyleSheet(colorMenuScheme('green'))
        info = PopupDialog('Gray Scheme', 'Scheme green ist enabled.', 10, self.colScheme)
        info.exec()

    def changeBlueVersionView(self):
        '''Method change the GUI colors to a blue scheme.'''
        self.colScheme = 'blue'
        self.setColorGeneralInformation(self.colScheme)
        self.centralwidget.setStyleSheet(colorWidgetScheme('blue'))
        self.menubar.setStyleSheet(colorMenuScheme('blue'))
        info = PopupDialog('Night Scheme', 'Scheme blue ist enabled.', 10, self.colScheme)
        info.exec()

    def changeCyanVersionView(self):
        '''Method change the GUI colors to a cyan scheme.'''
        self.colScheme = 'cyan'
        self.setColorGeneralInformation(self.colScheme)
        self.centralwidget.setStyleSheet(colorWidgetScheme('cyan'))
        self.menubar.setStyleSheet(colorMenuScheme('cyan'))
        info = PopupDialog('Night Scheme', 'Scheme cyan ist enabled.', 10, self.colScheme)
        info.exec()

    def changeMagentaVersionView(self):
        '''Method change the GUI colors to a magenta scheme.'''
        self.colScheme = 'magenta'
        self.setColorGeneralInformation(self.colScheme)
        self.centralwidget.setStyleSheet(colorWidgetScheme('magenta'))
        self.menubar.setStyleSheet(colorMenuScheme('magenta'))
        info = PopupDialog('Night Scheme', 'Scheme magenta ist enabled.', 10, self.colScheme)
        info.exec()

    def changeYellowVersionView(self):
        '''Method change the GUI colors to a yellow scheme.'''
        self.colScheme = 'yellow'
        self.setColorGeneralInformation(self.colScheme)
        self.centralwidget.setStyleSheet(colorWidgetScheme('yellow'))
        self.menubar.setStyleSheet(colorMenuScheme('yellow'))
        info = PopupDialog('Night Scheme', 'Scheme yellow ist enabled.', 10, self.colScheme)
        info.exec()

    def changeGrayVersionView(self):
        '''Method change the GUI colors to a gray scheme.'''
        self.colScheme = 'gray'
        self.setColorGeneralInformation(self.colScheme)
        self.centralwidget.setStyleSheet(colorWidgetScheme('gray'))
        self.menubar.setStyleSheet(colorMenuScheme('gray'))
        info = PopupDialog('Night Scheme', 'Scheme gray ist enabled.', 10, self.colScheme)
        info.exec()


# **************************************************************************************
# Help-Menu funtions

    def viewAbout(self):
        info = PopupDialog('ABOUT INFORMATION', 'linux iOptron mount commander, liomoco\nliomoco is a controlling program for iOptron mounts.\n@ Wolfgang Rafelt, germany\n', 80, self.colScheme)
        info.exec()

# **************************************************************************************
# Status funtion

    def scanStatus(self):
        # general informations
        self.t1 = process_time()
        self.refreshAllMountInformations()
        # time to read status informations
        self.t2 = process_time()
#        print('runtime start process: ',self.t2 - self.t1)

# **************************************************************************************
# RadioButtons-Speed funtions
    '''This Methods changes the mount move speed.'''

    def rBSpeed1xClicked(self):
        if self.radioButton1x.isChecked():
            self.scope.setMovingSpeed(1)
#            print('1x')

    def rBSpeed2xClicked(self):
        if self.radioButton2x.isChecked():
            self.scope.setMovingSpeed(2)
#            print('2x')

    def rBSpeed8xClicked(self):
        if self.radioButton8x.isChecked():
            self.scope.setMovingSpeed(3)
#            print('8x')

    def rBSpeed16xClicked(self):
        if self.radioButton16x.isChecked():
            self.scope.setMovingSpeed(4)
#            print('16x')

    def rBSpeed64xClicked(self):
        if self.radioButton64x.isChecked():
            self.scope.setMovingSpeed(5)
#            print('64x')

    def rBSpeed128xClicked(self):
        if self.radioButton128x.isChecked():
            self.scope.setMovingSpeed(6)
#            print('128x')

    def rBSpeed256xClicked(self):
        if self.radioButton256x.isChecked():
            self.scope.setMovingSpeed(7)
#            print('256x')

    def rBSpeed512xClicked(self):
        if self.radioButton512x.isChecked():
            self.scope.setMovingSpeed(8)
#            print('512x')

    def rBSpeedMaxClicked(self):
        if self.radioButtonMax.isChecked():
            self.scope.setMovingSpeed(9)
#            print('Max')

# **************************************************************************************
# RadioButtons-Tracking Rate funtions
    '''This Methods changes the mount tracking rate.'''

    def rBTrackingSideralClicked(self):
        if self.radioButtonTrackingSideral.isChecked():
            self.scope.setTrackingRate('Sidereal')

    def rBTrackingLunarClicked(self):
        if self.radioButtonTrackingLunar.isChecked():
            self.scope.setTrackingRate('Lunar')

    def rBTrackingSolarClicked(self):
        if self.radioButtonTrackingSolar.isChecked():
            self.scope.setTrackingRate('Solar')

    def rBTrackingKingClicked(self):
        if self.radioButtonTrackingKing.isChecked():
            self.scope.setTrackingRate('King')

    def rBTrackingCustomClicked(self):
        if self.radioButtonTrackingCustom.isChecked():
            self.scope.setTrackingRate('Custom')

# **************************************************************************************
# Buttons-Move funtions
    '''This Methods starts and stops the mount move directions.'''

    def buttonStopClicked(self):
        self.scope.stopAllMovement()
        self.scope.myMount.isInMotion = False

    def buttonNorthWestClicked(self):
        if self.scope.myMount.isInMotion:
            self.buttonStopClicked()
        else:
            self.scope.moveNorth()
            self.scope.moveWest()
            self.scope.myMount.isInMotion = True

    def buttonNorthClicked(self):
        if self.scope.myMount.isInMotion:
            self.buttonStopClicked()
        else:
            self.scope.moveNorth()
            self.scope.myMount.isInMotion = True

    def buttonNorthEastClicked(self):
        if self.scope.myMount.isInMotion:
            self.buttonStopClicked()
        else:
            self.scope.moveNorth()
            self.scope.moveEast()
            self.scope.myMount.isInMotion = True

    def buttonWestClicked(self):
        if self.scope.myMount.isInMotion:
            self.buttonStopClicked()
        else:
            self.scope.moveWest()
            self.scope.myMount.isInMotion = True
    
    def buttonEastClicked(self):
        if self.scope.myMount.isInMotion:
            self.buttonStopClicked()
        else:
            self.scope.moveEast()
            self.scope.myMount.isInMotion = True

    def buttonSouthWestClicked(self):
        if self.scope.myMount.isInMotion:
            self.buttonStopClicked()
        else:
            self.scope.moveSouth()
            self.scope.moveWest()
            self.scope.myMount.isInMotion = True

    def buttonSouthClicked(self):
        if self.scope.myMount.isInMotion:
            self.buttonStopClicked()
        else:
            self.scope.moveSouth()
            self.scope.myMount.isInMotion = True

    def buttonSouthEastClicked(self):
        if self.scope.myMount.isInMotion:
            self.buttonStopClicked()
        else:
            self.scope.moveSouth()
            self.scope.moveEast()
            self.scope.myMount.isInMotion = True

# **************************************************************************************
# Button funtions

    def buttonTrackingStartStopClicked(self):
        '''This Method starts and stops the mounts tracking.'''
        if self.scope.tracking.isTracking:
            self.scope.stopTracking()
            self.scope.tracking.isTracking = False
            self.labelGeneralInformationTracking.setText('Tracking: ' + str(self.scope.tracking.isTracking))
            info = PopupDialog('INFO: Tracking', 'Tracking is stoped.', 20, self.colScheme)
            info.exec()
        else:
            self.scope.startTracking()
            self.scope.tracking.isTracking = True
            self.labelGeneralInformationTracking.setText('Tracking: ' + str(self.scope.tracking.isTracking))
            info = PopupDialog('INFO: Tracking', 'Tracking is started.', 20, self.colScheme)
            info.exec()

    def buttonZeroPositionClicked(self):
        self.scope.goToZeroPosition()
        info = PopupDialog('INFO: Zero Position', 'Mount is slewing to the zero position.', 20, self.colScheme)
        info.exec()

    def buttonParkPositionClicked(self):
        self.scope.park()
        if self.scope.parking.isParked:
            info = PopupDialog('INFO: Parking', 'Mount is parked.', 20, self.colScheme)
            info.exec()

    def buttonUnparkClicked(self):
        self.scope.unpark()
        if not self.scope.parking.isParked:
            info = PopupDialog('INFO: Parking', 'Mount is unparked.', 20, self.colScheme)
            info.exec()

    def buttonSynchronizeMountClicked(self):
        if self.scope.synchronizeMount():
            info = PopupDialog('INFO: Synchronize', 'Mount synchronize. The most recently defined\n RA and DEC, or ALT and AZ become the commanded values.', 20, self.colScheme)
            info.exec()


# **************************************************************************************
# Timer funtions

    def refreshCoordinates(self):
        '''This Method refreshes the mounts coordinates periodical timer controlled.'''
        if not self.scope.myMount.isInIoProzess:
            self.t3 = process_time()

            if self.timerPollingOffset != 0:
                if self.timerPollingOffset == self.timerCycle:
                    self.timerCycle = 0
                    self.refreshAllMountInformations()
                else:
                    self.timerCycle = self.timerCycle + 1
                    self.scope.refreshCoordinates()
                    # Ra, Dec write format strings
                    d = f"{self.scope.rightAscension.hours:02d}"
                    m = f"{self.scope.rightAscension.minutes:02d}"
                    s = f"{self.scope.rightAscension.seconds:02.0f}"
                    self.lineEditRA.selectAll()
                    self.lineEditRA.insert(d + 'h' + m + 'min' + s + 's')
                    d = f"{self.scope.declination.degrees:02d}"
                    m = f"{self.scope.declination.minutes:02d}"
                    s = f"{self.scope.declination.seconds:02.0f}"
                    self.lineEditDEC.selectAll()
                    self.lineEditDEC.insert(d + '°' + m + '\'' + s + '\"')
                    # Alt, AZI write format strings
                    d = f"{self.scope.altitude.degrees:02d}"
                    m = f"{self.scope.altitude.minutes:02d}"
                    s = f"{self.scope.altitude.seconds:02.0f}"
                    self.lineEditALT.selectAll()
                    self.lineEditALT.insert(d + '°' + m + '\'' + s + '\"')
                    d = f"{self.scope.azimuth.degrees:03d}"
                    m = f"{self.scope.azimuth.minutes:02d}"
                    s = f"{self.scope.azimuth.seconds:02.0f}"
                    self.lineEditAZI.selectAll()
                    self.lineEditAZI.insert(d + '°' + m + '\'' + s + '\"')
                    # Time and Date write format strings
                    self.scope.getTimeInformation()
                    dateAndTime = self.scope.time.formatted
                    self.lineEditDate.selectAll()
                    self.lineEditDate.insert(dateAndTime[0:10])
                    self.lineEditTime.selectAll()
                    self.lineEditTime.insert(dateAndTime[12:20])
                    self.t4 = process_time()
#            print('executing time: ',self.t4 - self.t3)

    def refreshAllMountInformations(self):
        '''This Method refreshes the all mount informations periodical timer controlled.'''
        self.scope.getAllKindsOfStatus()
        self.labelGeneralInformtionModel.setText('Mount Model: ' + str(self.scope.mountVersion))
        self.labelGeneralInformtionMountStatus.setText('Mount Status: ' + self.scope.myMount.connectionStatus + ', ' + self.scope.mountConnectionType)
        self.labelGeneralInformationTracking.setText('Tracking: ' + str(self.scope.tracking.isTracking))
        self.labelGeneralInformtionStatus.setText('Status: ' + str(self.scope.systemStatus.description))
        self.labelGeneralInformationTime.setText('Time Source: ' + str(self.scope.timeSource.description))
        if self.scope.timeSource.description == 'GPS':
            self.groupBoxDateAndTime.setEnabled(False)
            self.pushButtonSetDateAndTimeFromPC.setEnabled(False)
            self.labelGPSActiv.setVisible(True)
        else:
            self.pushButtonSetDateAndTimeFromPC.setEnabled(True)
        self.labelGeneralInformtionGPS.setText('GPS: ' + str(self.scope.location.gpsAvailable))
        self.labelGeneralInformtionHemisphere.setText('Hemisphere: ' + self.scope.hemisphere.location)

        # Location
        if self.scope.hemisphere.location =='north':
            hemi = 'N'
        else:
            hemi = 'S'
        if self.scope.location.longitude > 0:
            longi = 'E'
        else:
            longi = 'W'
        self.lineEditLatitude.selectAll()
        lati = convertDegreesToDms(self.scope.location.latitude)
        self.lineEditLatitude.insert(hemi + str(lati[0]) + '°' + str(lati[1]) + '\'' + str(round(lati[2],1)) + '\"')
        self.lineEditLongitude.selectAll()
        long = convertDegreesToDms(self.scope.location.longitude)
        self.lineEditLongitude.insert(longi + str(long[0]) + '°' + str(long[1]) + '\'' + str(round(long[2],1)) + '\"')
        # RA, DEC, ALT, AZI and Time
        self.refreshCoordinates()
        # Other Informations
        self.lineEditSavedTR.selectAll()
        self.lineEditSavedTR.insert(str(format(self.scope.tracking.custom,'.4f')))
        self.lineEditSummerTime.selectAll()
        self.lineEditSummerTime.insert(str(self.scope.time.dst))
        self.lineEditPier.selectAll()
        self.lineEditPier.insert(self.scope.pierSide)
        self.lineEditPointingState.selectAll()
        self.lineEditPointingState.insert(self.scope.counterweightDirection)
        self.scope.getAltitudeLimit()
        self.lineEditAltitudeLimitInfo.selectAll()
        self.lineEditAltitudeLimitInfo.insert(str(self.scope.altitude.limit) + '°')
        self.scope.getmeridianTreatment()
        if self.scope.meridian.code == 0:
            action = 'stop'
        else:
            action = 'flip'
        self.lineEditTreatmentStopFlip.selectAll()
        self.lineEditTreatmentStopFlip.insert(str(action))
        self.lineEditTreatmentValue.selectAll()
        self.lineEditTreatmentValue.insert(str(self.scope.meridian.degreeLimit) + '°')
        self.lineEditFirmwareMainboard.selectAll()
        self.lineEditFirmwareMainboard.insert(self.scope.firmware.mainboard)
        self.lineEditFirmwareHandcontroller.selectAll()
        self.lineEditFirmwareHandcontroller.insert(self.scope.firmware.handController)
        self.lineEditFirmwareMotorRA.selectAll()
        self.lineEditFirmwareMotorRA.insert(self.scope.firmware.rightAscention)
        self.lineEditFirmwareMotorDEC.selectAll()
        self.lineEditFirmwareMotorDEC.insert(self.scope.firmware.declination)
        if self.scope.tracking.code == '0':
            self.radioButtonTrackingSideral.setChecked(True)
        elif self.scope.tracking.code == '1':
            self.radioButtonTrackingLunar.setChecked(True)
        elif self.scope.tracking.code == '2':
            self.radioButtonTrackingSolar.setChecked(True)
        elif self.scope.tracking.code == '3':
            self.radioButtonTrackingKing.setChecked(True)
        elif self.scope.tracking.code == '4':
            self.radioButtonTrackingCustom.setChecked(True)
        if self.scope.movingSpeed.code == '1':
            self.radioButton1x.setChecked(True)
        elif self.scope.movingSpeed.code == '2':
            self.radioButton2x.setChecked(True)
        elif self.scope.movingSpeed.code == '3':
            self.radioButton8x.setChecked(True)
        elif self.scope.movingSpeed.code == '4':
            self.radioButton16x.setChecked(True)
        elif self.scope.movingSpeed.code == '5':
            self.radioButton64x.setChecked(True)
        elif self.scope.movingSpeed.code == '6':
            self.radioButton128x.setChecked(True)
        elif self.scope.movingSpeed.code == '7':
            self.radioButton256x.setChecked(True)
        elif self.scope.movingSpeed.code == '8':
            self.radioButton512x.setChecked(True)
        elif self.scope.movingSpeed.code == '9':
            self.radioButtonMax.setChecked(True)
        self.lineEditTrackingRateValue.selectAll()
        self.lineEditTrackingRateValue.insert(str(format(self.scope.tracking.custom,'.4f')))
        #Settings 2
        if self.scope.time.summerTime == 1:
            self.comboBoxOthersSummerTime.setCurrentIndex(0)
        else:
            self.comboBoxOthersSummerTime.setCurrentIndex(1)
        self.lineEditOthersAltitudeLimit.selectAll()
        self.lineEditOthersAltitudeLimit.insert(str(self.scope.altitude.limit) + '°')
        if self.scope.meridian.code == 0:
            self.comboBoxOthersMeridianTreatmentStopFlip.setCurrentIndex(0)
        else:
            self.comboBoxOthersMeridianTreatmentStopFlip.setCurrentIndex(1)
        self.lineEditOthersMeridianTreatmentValue.selectAll()
        self.lineEditOthersMeridianTreatmentValue.insert(str(self.scope.meridian.degreeLimit) + '°')

    def buttonWriteDateTime(self):
        '''This Method refreshes the all mount informations periodical timer controlled.'''
        valueDate = self.lineEditSetDate.text()
        valueTime = self.lineEditSetTime.text()
        if checkValidFormat(valueDate,'zzpzzpzzzz') and checkValidFormat(valueTime,'zzpzzpzz'):
            valueDT = valueDate + valueTime
#            print('Date/Time String: ',valueDT)
            self.scope.setTime(valueDT)
            info = PopupDialog('INFO: date and time', 'Date and Time are set.', 20, self.colScheme)
            info.exec()
        else:
            info = PopupDialog('ERROR: input value', 'Input string date is invalid.', 20, self.colScheme)
            info.exec()

    def buttonWriteTimeZone(self):
        info = PopupDialog('INFO: function', 'Time zone set function is just not implemented.', 20, self.colScheme)
        info.exec()

    def buttonWriteLatitude(self):
        info = PopupDialog('INFO: function', 'Latitude set function is just not implemented.', 20, self.colScheme)
        info.exec()
        '''value = self.lineEditSetLatitude.text()
        if checkValidFormat(value,'nzzdzzmzzs'):
            valueDeg = convertDmsToDegrees(int(value[1:3]), int(value[4:6]), float(value[7:9]))
            if value == 'S':
                valueDeg = valueDeg * (-1)
            if valueDeg >= -90 and valueDeg <= 90:
                if self.scope.setLatitude(valueDeg):
                    info = PopupDialog('INFO: latitude', 'Latitude are set.', 20, self.colScheme)
                    info.exec()
                else:
                    info = PopupDialog('ERROR: latitude', 'Latitude is not set.', 20, self.colScheme)
                    info.exec()
        else:
            info = PopupDialog('ERROR: input value', 'Input string date is invalid.', 20, self.colScheme)
            info.exec()'''

    def buttonWriteLongitude(self):
        info = PopupDialog('INFO: function', 'Longitude set function is just not implemented.', 20, self.colScheme)
        info.exec()

    def buttonWriteRaDec(self):
        value = self.lineEditSetRA.text()
        if checkValidFormat(value,'zzhzzmzzs'):
            self.scope.setCommandedRightAscension(int(value[0:2]), int(value[3:5]), int(value[6:8]))
            value = self.lineEditSetDEC.text()
            if checkValidFormat(value,'vzz°zz\'zz\"'):
                self.scope.setCommandedDeclination(int(value[0:3]), int(value[4:6]), int(value[7:9]))
                if self.scope.moveToDefinedRaAndDec():
                    info = PopupDialog('Information: move', 'The mount move to alt, azi.', 20, self.colScheme)
                    info.exec()
                else:
                    info = PopupDialog('ERROR: move', 'A problem move asc, dec is occurred.', 20, self.colScheme)
                    info.exec()
            else:
                info = PopupDialog('ERROR: input value', 'Input string DEC invalid.', 20, self.colScheme)
                info.exec()
        else:
            info = PopupDialog('ERROR: input value', 'Input string RA invalid.', 20, self.colScheme)
            info.exec()

    def buttonWriteAziAlt(self):
        value = self.lineEditSetAZI.text()
        if checkValidFormat(value,'zzz°zz\'zz\"'):
            self.scope.setCommandedAzimuth(int(value[0:3]), int(value[4:6]), int(value[7:9]))
            value = self.lineEditSetALT.text()
            if checkValidFormat(value,'zz°zz\'zz\"'):
                self.scope.setCommandedAltitude(int(value[0:2]), int(value[3:5]), int(value[6:8]))
                if self.scope.moveToDefinedAltAndAz():
                    info = PopupDialog('Information: move', 'The mount move to alt, azi.', 20, self.colScheme)
                    info.exec()
                else:
                    info = PopupDialog('ERROR: move', 'A problem move alt, azi is occurred.', 20, self.colScheme)
                    info.exec()
            else:
                info = PopupDialog('ERROR: input value', 'Input string ALT invalid.', 20, self.colScheme)
                info.exec()
        else:
            info = PopupDialog('ERROR: input value', 'Input string AZI invalid.', 20, self.colScheme)
            info.exec()

    def buttonReadDateAndTimeFromPC(self):
        '''Method read date and time from PC and write ist to the lineEdit folders.'''
        datePC = strftime("%d.%m.%Y")
        timePC = strftime("%H:%M:%S")
        self.lineEditDatePC.selectAll()
        self.lineEditDatePC.insert(datePC)
        self.lineEditTimePC.selectAll()
        self.lineEditTimePC.insert(timePC)

    def buttonSetDateAndTimeFromPC(self):
        '''Method write date and time to the mount if no GPS is present.'''
        self.scope.setPCTime()
        info = PopupDialog('INFO: date and time', 'Date and Time from PC are set.', 20, self.colScheme)
        info.exec()

    def buttonWriteSummerTime(self):
        if self.comboBoxOthersSummerTime.currentIndex() == 0:
            self.scope.setDaylightSavings(True)
        else:
            self.scope.setDaylightSavings(False)

    def buttonWriteAltitudeLimit(self):
        value = self.lineEditOthersAltitudeLimit.text()
        if checkValidFormat(value,'vzz°'):
            valueNumber = value[1:3]
            if int(valueNumber) < 0 or int(valueNumber) > 45:
                self.lineEditOthersAltitudeLimit.selectAll()
                self.lineEditOthersAltitudeLimit.insert('error > +xx°')
                info = PopupDialog('ERROR: value', 'Altitude limit not practical.', 20, self.colScheme)
                info.exec()
            else:
                if self.scope.setAltitudeLimit(value):
                    info = PopupDialog('INFO: Altitude Limit', 'Altitude limit are set.', 20, self.colScheme)
                    info.exec()
        else:
            info = PopupDialog('ERROR: format', 'Try again.', 20, self.colScheme)
            info.exec()

    def buttonWriteMeridianTreatmentStopFlip(self):
        # treatment und limit vorher ermitteln
        if self.comboBoxOthersMeridianTreatmentStopFlip.currentIndex() == 0:
            treatment = '0'
        else:
            treatment = '1'
        value = self.lineEditOthersMeridianTreatmentValue.text()
        if checkValidFormat(value,'zz°'):
            limit = value[0:2]
            if int(limit) > 15:
                self.lineEditOthersMeridianTreatmentValue.selectAll()
                self.lineEditOthersMeridianTreatmentValue.insert('error > xx°')
                info = PopupDialog('ERROR: value', 'Meridian treatment value not practical.', 20, self.colScheme)
                info.exec()
            else:
                if self.scope.setMeridianTreatment(treatment, limit): # Parameter str
                    info = PopupDialog('INFO: Altitude Limit', 'Meridian treatment are set.', 20, self.colScheme)
                    info.exec()
        else:
            info = PopupDialog('ERROR: format', 'Format invalid, try again.', 20, self.colScheme)
            info.exec()

        self.lineEditDatePC.selectAll()


# **************************************************************************************
# primary program part
# log-files size check 

errorFile = open('logfile.log', 'r+')
errorData = errorFile.readlines()
errorFile.close()

if len(errorData) > 3000:                # max entrys in the log-file
    errorFile = open('error.log', 'w')
    errorData = errorData[len(errorData)-2000:len(errorData)]
    errorFile.writelines(errorData)
    errorFile.close()

errorData = []


# **************************************************************************************
# Logger init

logging.basicConfig(
    filename='logfile.log',
    filemode='a',
    format='%(asctime)s %(levelname)s: %(message)s',
    datefmt='%d.%m.%Y %H:%M:%S',
    level=logging.DEBUG
)

# **************************************************************************************
# Main Programm part

if __name__ == "__main__":
# **************************************************************************************
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
